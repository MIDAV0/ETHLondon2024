{
  "address": "0x896a9E2A9769e43E085bFa88DDC477B359E89a0a",
  "abi": [
    {
      "inputs": [],
      "name": "MAX_HOURS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_HOURS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "numberOfShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_disputeAdmin",
          "type": "address"
        }
      ],
      "name": "createContract",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "freelancerInfoMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "stakingContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "freelancers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "stakingContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFreelancers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "stakingContractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct ContractFactory.FreelancerInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbf1c73c97007cb6c1feabdb6bc2f0c6c734226b20093a9dfa29c77b43933b50f",
  "receipt": {
    "to": null,
    "from": "0xcC2042a7c7997a04e26389B9689f2AE766342732",
    "contractAddress": "0x896a9E2A9769e43E085bFa88DDC477B359E89a0a",
    "transactionIndex": 0,
    "gasUsed": "4318565",
    "logsBloom": "0x
    "blockHash": "0x35f82f41e65ff8792bac9119ddcc301b68e95f621f91f142fe479c5cab9fed19",
    "transactionHash": "0xbf1c73c97007cb6c1feabdb6bc2f0c6c734226b20093a9dfa29c77b43933b50f",
    "logs": [],
    "blockNumber": 23048154,
    "cumulativeGasUsed": "4318565",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9a664155d8412e9c984858c533a935eb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MAX_HOURS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_HOURS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"numberOfShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_disputeAdmin\",\"type\":\"address\"}],\"name\":\"createContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freelancerInfoMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"stakingContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freelancers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"stakingContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFreelancers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"stakingContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct ContractFactory.FreelancerInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ContractFactory.sol\":\"ContractFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ContractFactory.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./StakingContract.sol\\\";\\n\\ncontract ContractFactory {\\n\\tuint256 public constant MIN_HOURS = 24;\\n\\tuint256 public constant MAX_HOURS = 720;\\n\\n\\tstruct FreelancerInfo {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tstring description;\\n\\t\\taddress stakingContractAddress;\\n\\t\\taddress owner;\\n\\t}\\n\\n\\tuint256 public idCounter;\\n\\tFreelancerInfo[] public freelancers;\\n\\tmapping (address => FreelancerInfo) public freelancerInfoMapping;\\n\\n\\tfunction createContract(\\n\\t\\tstring memory name,\\n\\t\\tstring memory description,\\n\\t\\tstring memory tokenName,\\n\\t\\tstring memory tokenSymbol,\\n\\t\\tuint256 numberOfShares,\\n\\t\\tuint256 stakeAmount,\\n\\t\\taddress _disputeAdmin\\n\\t) public payable {\\n\\t\\trequire(msg.value == stakeAmount, \\\"Insufficient Stake Amount\\\");\\n\\t\\trequire(\\n\\t\\t\\tnumberOfShares <= MAX_HOURS && numberOfShares >= MIN_HOURS,\\n\\t\\t\\t\\\"Invalid number of shares. Should be within 24 and 720 hours\\\"\\n\\t\\t);\\n\\t\\tuint256 hourlyRateForCurve = (numberOfShares * 1 ether * 1 ether) / stakeAmount;\\n\\t\\t// uint256 hourlyRate = (stakeAmount * 1 ether) / numberOfShares;\\n\\t\\tStakingContract stakingContract = new StakingContract(\\n\\t\\t\\t_disputeAdmin,\\n\\t\\t\\tnumberOfShares,\\n\\t\\t\\thourlyRateForCurve,\\n\\t\\t\\ttokenName,\\n\\t\\t\\ttokenSymbol\\n\\t\\t);\\n\\t\\t// Transfer the stake amount to the staking contract\\n\\n\\t\\t(bool success, ) = payable(address(stakingContract)).call{\\n\\t\\t\\tvalue: msg.value\\n\\t\\t}(\\\"\\\");\\n\\t\\trequire(success, \\\"Stake transfer failed\\\");\\n\\t\\tfreelancers.push(\\n\\t\\t\\tFreelancerInfo(\\n\\t\\t\\t\\tidCounter++,\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tdescription,\\n\\t\\t\\t\\taddress(stakingContract),\\n\\t\\t\\t\\tmsg.sender\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tfreelancerInfoMapping[msg.sender] = freelancers[freelancers.length - 1];\\n\\t}\\n\\n\\tfunction getFreelancers() public view returns (FreelancerInfo[] memory) {\\n\\t\\treturn freelancers;\\n\\t}\\n\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0x2a6297af0f0c70899690c499d2b0da318aeb92b79ff4a04cc2f9307b58aae7fb\",\"license\":\"Unlicense\"},\"contracts/EmployeeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract EmployeeToken is ERC20, Ownable {\\n\\tconstructor(\\n\\t\\taddress initialOwner,\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\tuint256 initialSupply\\n\\t) ERC20(name, symbol) {\\n\\t\\t_mint(initialOwner, initialSupply);\\n\\t}\\n\\n\\tfunction mint(address to, uint256 amount) public onlyOwner {\\n\\t\\t_mint(to, amount);\\n\\t}\\n}\\n\",\"keccak256\":\"0xc9469052546187cca3833e96f6544910db85d0e4c805fd1fd757b390392ec0a3\",\"license\":\"MIT\"},\"contracts/StakingContract.sol\":{\"content\":\"//SPDX-License-Identifier: Unlic ense\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./EmployeeToken.sol\\\";\\n\\ncontract StakingContract is Ownable {\\n\\t/// @dev Validation period for the client to confirm the work delivered by the freelancer\\n\\tuint256 public constant VALIDATION_PERIOD = 3 days;\\n\\t/// @dev Buffer period for the freelancer to deliver the work. Adds to the deadline\\n\\tuint256 public constant BUFFER_PERIOD = 1 days;\\n\\n\\tuint256 public hourlyRate;\\n\\n\\tuint256 public freelancerStake;\\n\\n\\taddress public disputeAdmin;\\n\\n\\tuint256 public sharesSupply;\\n\\n\\tevent Trade(\\n\\t\\taddress trader,\\n\\t\\taddress subject,\\n\\t\\tbool isBuy,\\n\\t\\tuint256 shareAmount,\\n\\t\\tuint256 ethAmount,\\n\\t\\tuint256 supply\\n\\t);\\n\\n\\tenum TaskStatus {\\n\\t\\tNOT_STARTED,\\n\\t\\tIN_PROGRESS,\\n\\t\\tCANCELED,\\n\\t\\tWORK_DELIVERED,\\n\\t\\tWORK_VALIDATED,\\n\\t\\tWORK_COMPLETED\\n\\t}\\n\\n\\tstruct Task {\\n\\t\\tuint256 id;\\n\\t\\tuint256 startTime;\\n\\t\\tuint256 duration;\\n\\t\\tuint256 shares;\\n\\t\\tuint256 stakeAmount;\\n\\t\\tTaskStatus status;\\n\\t\\taddress client;\\n\\t\\tstring title;\\n\\t\\tstring description;\\n\\t}\\n\\n\\tstruct Dispute {\\n\\t\\tuint256 createdAt;\\n\\t\\tbool isResolved;\\n\\t}\\n\\n\\tmodifier taskExists(uint256 taskId) {\\n\\t\\trequire(tasks[taskId].id != 0, \\\"Task does not exist\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmapping(uint256 => Task) public tasks;\\n\\tuint256 public taskCounter;\\n\\tmapping(uint256 => Dispute) public disputes;\\n\\n\\tEmployeeToken public _EmployeeToken;\\n\\taddress public erc20TokenAddress;\\n\\n\\tconstructor(\\n\\t\\taddress _disputeAdmin, // address of the dispute admin\\n\\t\\tuint256 initialSupplyOfShares,\\n\\t\\tuint256 _hourlyRate,\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol\\n\\t) {\\n\\t\\t_transferOwnership(tx.origin);\\n\\t\\tdisputeAdmin = _disputeAdmin;\\n\\t\\t// Calculate t\\n\\t\\t_EmployeeToken = new EmployeeToken(\\n\\t\\t\\taddress(this),\\n\\t\\t\\tname,\\n\\t\\t\\tsymbol,\\n\\t\\t\\tinitialSupplyOfShares * 1 ether\\n\\t\\t);\\n\\t\\terc20TokenAddress = address(_EmployeeToken);\\n\\t\\thourlyRate = _hourlyRate;\\n\\t\\tbuyShares(1 ether);\\n\\t}\\n\\n\\t/// @dev Function to create task for the freelancer. Client also has to stake some amount of ETH equal to the shares value.\\n\\t/// @param duration The duration of the task in hours\\n\\t/// @param _shares The amount of shares the client wants to stake.\\n\\tfunction createTask(\\n\\t\\tuint256 duration,\\n\\t\\tuint256 _shares,\\n\\t\\tstring memory title,\\n\\t\\tstring memory description\\n\\t) public payable {\\n\\t\\t// Check that frelancer's stake is more or equal to 1 share value\\n\\t\\tuint256 sharesPrice = getBuyPrice(_shares);\\n\\t\\trequire(\\n\\t\\t\\tfreelancerStake >= sharesPrice,\\n\\t\\t\\t\\\"Freelancer's stake is less than 1 share value\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tmsg.value == sharesPrice,\\n\\t\\t\\t\\\"Client stake is not equal to the shares value\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_EmployeeToken.balanceOf(msg.sender) >= _shares,\\n\\t\\t\\t\\\"Insufficient shares\\\"\\n\\t\\t);\\n\\n\\t\\ttaskCounter++;\\n\\n\\t\\ttasks[taskCounter] = Task({\\n\\t\\t\\tid: taskCounter,\\n\\t\\t\\tstartTime: 0,\\n\\t\\t\\tduration: duration + BUFFER_PERIOD,\\n\\t\\t\\tshares: _shares,\\n\\t\\t\\tstakeAmount: sharesPrice,\\n\\t\\t\\tstatus: TaskStatus.NOT_STARTED,\\n\\t\\t\\tclient: msg.sender,\\n\\t\\t\\ttitle: title,\\n\\t\\t\\tdescription: description\\n\\t\\t});\\n\\n\\t\\t// Client transfers the int amount of shares to the contract\\n\\t\\t_EmployeeToken.transferFrom(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\ttasks[taskCounter].shares\\n\\t\\t);\\n\\t}\\n\\n\\t/// @dev Function to start the task. Called by the freelancer\\n\\tfunction startTask(uint256 taskId) public taskExists(taskId) onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].status == TaskStatus.NOT_STARTED,\\n\\t\\t\\t\\\"Task already started or canceled\\\"\\n\\t\\t);\\n\\n\\t\\ttasks[taskId].startTime = block.timestamp;\\n\\t\\ttasks[taskId].status = TaskStatus.IN_PROGRESS;\\n\\t}\\n\\n\\tfunction cancelTask(uint256 taskId) public taskExists(taskId) {\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].client == msg.sender,\\n\\t\\t\\t\\\"You are not the client of this task\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].status == TaskStatus.NOT_STARTED,\\n\\t\\t\\t\\\"Task already started\\\"\\n\\t\\t);\\n\\n\\t\\t// Send the client's stake back\\n\\t\\t(bool success, ) = tasks[taskId].client.call{\\n\\t\\t\\tvalue: tasks[taskId].stakeAmount\\n\\t\\t}(\\\"\\\");\\n\\t\\trequire(success, \\\"Failed to send the stake amount to the client\\\");\\n\\n\\t\\t// Release the clien's shares\\n\\t\\t_EmployeeToken.transfer(tasks[taskId].client, tasks[taskId].shares);\\n\\n\\t\\ttasks[taskId].status = TaskStatus.CANCELED;\\n\\t}\\n\\n\\t/// @dev Function to slash the freelancer if they don't deliver the work on time\\n\\tfunction slashFreelancer(uint256 taskId) public taskExists(taskId) {\\n\\t\\t// slash freelancer\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].status == TaskStatus.IN_PROGRESS,\\n\\t\\t\\t\\\"Can't slash freelancer because the task is not in progres\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].startTime + tasks[taskId].duration < block.timestamp,\\n\\t\\t\\t\\\"Task is not late yet\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].client == msg.sender,\\n\\t\\t\\t\\\"You are not the client of this task\\\"\\n\\t\\t);\\n\\n\\t\\t// slash freelancer. Send freelancer's stake to the client\\n\\t\\t(bool success, ) = tasks[taskId].client.call{\\n\\t\\t\\tvalue: 2 * tasks[taskId].stakeAmount\\n\\t\\t}(\\\"\\\");\\n\\t\\trequire(success, \\\"Failed to send the stake amount to the client\\\");\\n\\n\\t\\t// Send locked shares to the client\\n\\t\\t_EmployeeToken.transfer(tasks[taskId].client, tasks[taskId].shares);\\n\\n\\t\\ttasks[taskId].status = TaskStatus.WORK_COMPLETED;\\n\\t}\\n\\n\\t/// @dev Function that freelancer calls when client takes too long to validate the work\\n\\tfunction slashClient(uint256 taskId) public taskExists(taskId) onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].status == TaskStatus.WORK_DELIVERED,\\n\\t\\t\\t\\\"Task is not in the slashed client state\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].startTime +\\n\\t\\t\\t\\ttasks[taskId].duration +\\n\\t\\t\\t\\tVALIDATION_PERIOD <\\n\\t\\t\\t\\tblock.timestamp,\\n\\t\\t\\t\\\"Task validation is not late yet\\\"\\n\\t\\t);\\n\\t\\t// Release the freelancer's payment\\n\\t\\t_EmployeeToken.transfer(owner(), tasks[taskId].shares);\\n\\n\\t\\t// Where should we send the client's stake?\\n\\n\\t\\ttasks[taskId].status = TaskStatus.WORK_COMPLETED;\\n\\t}\\n\\n\\t/// @dev Function that freelancer  calls to confirm that they have delivered the work\\n\\t/// @param taskId The id of the task\\n\\tfunction confirmWorkDeleveredFreelancer(\\n\\t\\tuint256 taskId\\n\\t) public taskExists(taskId) onlyOwner {\\n\\t\\t// confirm work delivered\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].status == TaskStatus.IN_PROGRESS,\\n\\t\\t\\t\\\"Work already delivered\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].startTime + tasks[taskId].duration >= block.timestamp,\\n\\t\\t\\t\\\"Task is overdue\\\"\\n\\t\\t);\\n\\n\\t\\ttasks[taskId].status = TaskStatus.WORK_DELIVERED;\\n\\t}\\n\\n\\t/// @dev Function that client calls to confirm that they have received the work from freelancer\\n\\tfunction confirmWorkCompletedClient(\\n\\t\\tuint256 taskId,\\n\\t\\tbool delivered\\n\\t) public taskExists(taskId) {\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].client == msg.sender,\\n\\t\\t\\t\\\"You are not the client of this task\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].status == TaskStatus.WORK_DELIVERED,\\n\\t\\t\\t\\\"Work not delivered yet\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].startTime +\\n\\t\\t\\t\\ttasks[taskId].duration +\\n\\t\\t\\t\\tVALIDATION_PERIOD >=\\n\\t\\t\\t\\tblock.timestamp,\\n\\t\\t\\t\\\"Task is overdue for validation\\\"\\n\\t\\t);\\n\\n\\t\\tif (delivered) {\\n\\t\\t\\ttasks[taskId].status = TaskStatus.WORK_COMPLETED;\\n\\t\\t\\t// release the freelancer's payment\\n\\t\\t\\t_EmployeeToken.transfer(owner(), tasks[taskId].shares);\\n\\n\\t\\t\\t(bool success, ) = tasks[taskId].client.call{\\n\\t\\t\\t\\tvalue: tasks[taskId].stakeAmount\\n\\t\\t\\t}(\\\"\\\");\\n\\t\\t\\trequire(success, \\\"Failed to send the stake amount to the client\\\");\\n\\t\\t} else {\\n\\t\\t\\ttasks[taskId].status = TaskStatus.WORK_VALIDATED;\\n\\t\\t\\tcreateDispute(taskId);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction createDispute(uint256 taskId) internal {\\n\\t\\tdisputes[taskId] = Dispute({\\n\\t\\t\\tcreatedAt: block.timestamp,\\n\\t\\t\\tisResolved: false\\n\\t\\t});\\n\\t}\\n\\n\\tfunction resolveDispute(\\n\\t\\tuint256 taskId,\\n\\t\\tbool isClientRight\\n\\t) public taskExists(taskId) {\\n\\t\\trequire(disputes[taskId].isResolved, \\\"Dispute already resolved\\\");\\n\\t\\trequire(msg.sender == disputeAdmin, \\\"You are not the dispute admin\\\");\\n\\n\\t\\tif (isClientRight) {\\n\\t\\t\\t// Slash the freelancer and send the client's stake back\\n\\t\\t\\tfreelancerStake -= tasks[taskId].stakeAmount;\\n\\t\\t\\t(bool success, ) = tasks[taskId].client.call{\\n\\t\\t\\t\\tvalue: 2 * tasks[taskId].stakeAmount\\n\\t\\t\\t}(\\\"\\\");\\n\\t\\t\\trequire(success, \\\"Failed to send the stake amount to the client\\\");\\n\\n\\t\\t\\t// Send locked shares to the client\\n\\t\\t\\t_EmployeeToken.transfer(tasks[taskId].client, tasks[taskId].shares);\\n\\t\\t} else {\\n\\t\\t\\t// Release the freelancer's payment\\n\\t\\t\\t_EmployeeToken.transfer(owner(), tasks[taskId].shares);\\n\\n\\t\\t\\t// Send the client's stake to the freelancer\\n\\t\\t\\t(bool success, ) = owner().call{ value: tasks[taskId].stakeAmount }(\\n\\t\\t\\t\\t\\\"\\\"\\n\\t\\t\\t);\\n\\t\\t\\trequire(success, \\\"Failed to send the stake amount to the client\\\");\\n\\t\\t}\\n\\t\\ttasks[taskId].status = TaskStatus.WORK_COMPLETED;\\n\\t\\tdisputes[taskId].isResolved = true;\\n\\t}\\n\\n\\tfunction getPrice(\\n\\t\\tuint256 supply,\\n\\t\\tuint256 amount\\n\\t) public view returns (uint256) {\\n\\t\\trequire(_EmployeeToken.totalSupply() >= supply, \\\"Insufficient supply of shares\\\");\\n\\t\\tuint256 sum1 = supply == 0\\n\\t\\t\\t? 0\\n\\t\\t\\t: ((supply - 1 ether) * (supply) * (2 * (supply - 1 ether) + 1 ether)) / 6 ether;\\n\\t\\tuint256 sum2 = supply == 0 && amount == 1 ether\\n\\t\\t\\t? 0\\n\\t\\t\\t: ((supply - 1 ether + amount) *\\n\\t\\t\\t\\t(supply + amount) *\\n\\t\\t\\t\\t(2 * (supply - 1 ether + amount) + 1 ether)) / 6 ether;\\n\\t\\tuint256 summation = sum2 - sum1;\\n\\t\\treturn summation / (hourlyRate * 10);\\n\\t}\\n\\n\\tfunction getBuyPrice(\\n\\t\\tuint256 amount\\n\\t) public view returns (uint256) {\\n\\t\\treturn getPrice(sharesSupply, amount);\\n\\t}\\n\\n\\tfunction getSellPrice(\\n\\t\\tuint256 amount\\n\\t) public view returns (uint256) {\\n\\t\\treturn getPrice(sharesSupply - amount, amount);\\n\\t}\\n\\n\\tfunction buyShares(uint256 amount) public payable {\\n\\t\\tuint256 supply = sharesSupply;\\n\\t\\t// require(\\n\\t\\t// \\tsupply > 0 || sharesSubject == address(this),\\n\\t\\t// \\t\\\"Only the shares' subject can buy the first share\\\"\\n\\t\\t// );\\n\\t\\tuint256 price = getPrice(supply, amount);\\n\\t\\trequire(msg.value >= price, \\\"Insufficient payment\\\");\\n\\t\\tsharesSupply = supply + amount;\\n\\t\\temit Trade(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\ttrue,\\n\\t\\t\\tamount,\\n\\t\\t\\tprice,\\n\\t\\t\\tsupply + amount\\n\\t\\t);\\n\\t\\t_EmployeeToken.transfer(msg.sender, amount);\\n\\t}\\n\\n\\tfunction sellShares(uint256 amount) public payable {\\n\\t\\tuint256 supply = sharesSupply;\\n\\t\\trequire(supply > amount, \\\"Cannot sell the last share\\\");\\n\\t\\tuint256 price = getPrice(supply - amount, amount);\\n\\t\\trequire(_EmployeeToken.balanceOf(msg.sender) >= amount, \\\"Insufficient shares\\\");\\n\\t\\tsharesSupply = supply - amount;\\n\\t\\temit Trade(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tfalse,\\n\\t\\t\\tamount,\\n\\t\\t\\tprice,\\n\\t\\t\\tsupply - amount\\n\\t\\t);\\n\\t\\t(bool sent, ) = payable(msg.sender).call{ value: price }(\\\"\\\");\\n\\t\\t_EmployeeToken.transferFrom(msg.sender, address(this), amount);\\n\\t\\trequire(sent, \\\"Failed to send Ether\\\");\\n\\t}\\n\\n\\treceive() external payable {\\n\\t\\tif (tx.origin == owner()) {\\n\\t\\t\\tfreelancerStake += msg.value;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xd6f839701142b96ec8d0efd5e9ff9234b1688ff8fcc41b3a59cd103afd2ccdd4\",\"license\":\"Unlic ense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614d43806100206000396000f3fe6080604052600436106200007d5760003560e01c806320be5538116200005457806320be553814620001095780635d341543146200012f578063b5bb59c01462000147578063eb08ab28146200016e57600080fd5b806304debb5f146200008a5780630b9364d814620000a35780630eb3d4f614620000e457600080fd5b366200008557005b600080fd5b620000a16200009b36600462000941565b62000186565b005b348015620000b057600080fd5b50620000c8620000c236600462000a21565b62000512565b604051620000db95949392919062000a83565b60405180910390f35b348015620000f157600080fd5b50620000c86200010336600462000ad8565b62000682565b3480156200011657600080fd5b5062000120601881565b604051908152602001620000db565b3480156200013c57600080fd5b50620001206102d081565b3480156200015457600080fd5b506200015f620006a6565b604051620000db919062000afd565b3480156200017b57600080fd5b506200012060005481565b813414620001db5760405162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e74205374616b6520416d6f756e740000000000000060448201526064015b60405180910390fd5b6102d08311158015620001ef575060188310155b620002635760405162461bcd60e51b815260206004820152603b60248201527f496e76616c6964206e756d626572206f66207368617265732e2053686f756c6460448201527f2062652077697468696e20323420616e642037323020686f75727300000000006064820152608401620001d2565b6000826200027a85670de0b6b3a764000062000bcd565b6200028e90670de0b6b3a764000062000bcd565b6200029a919062000bed565b905060008285838989604051620002b1906200086b565b620002c195949392919062000c10565b604051809103906000f080158015620002de573d6000803e3d6000fd5b5090506000816001600160a01b03163460405160006040518083038185875af1925050503d806000811462000330576040519150601f19603f3d011682016040523d82523d6000602084013e62000335565b606091505b5050905080620003805760405162461bcd60e51b815260206004820152601560248201527414dd185ad9481d1c985b9cd9995c8819985a5b1959605a1b6044820152606401620001d2565b60016040518060a00160405280600080815480929190620003a19062000c5f565b90915550815260208082018e9052604082018d90526001600160a01b038616606083015233608090920191909152825460018181018555600094855293829020835160059092020190815590820151919290919082019062000404908262000d0a565b50604082015160028201906200041b908262000d0a565b5060608201516003820180546001600160a01b03199081166001600160a01b0393841617909155608090930151600490920180549093169116179055600180546200046890829062000dd7565b815481106200047b576200047b62000ded565b600091825260208083203384526002909152604090922060059091029091018054825590600180820190620004b39084018262000e03565b50600281810190620004c89084018262000e03565b5060038281015490820180546001600160a01b03199081166001600160a01b0393841617909155600493840154939092018054909216921691909117905550505050505050505050565b600181815481106200052357600080fd5b600091825260209091206005909102018054600182018054919350906200054a9062000c7b565b80601f0160208091040260200160405190810160405280929190818152602001828054620005789062000c7b565b8015620005c95780601f106200059d57610100808354040283529160200191620005c9565b820191906000526020600020905b815481529060010190602001808311620005ab57829003601f168201915b505050505090806002018054620005e09062000c7b565b80601f01602080910402602001604051908101604052809291908181526020018280546200060e9062000c7b565b80156200065f5780601f1062000633576101008083540402835291602001916200065f565b820191906000526020600020905b8154815290600101906020018083116200064157829003601f168201915b50505050600383015460049093015491926001600160a01b039081169216905085565b600260205260009081526040902080546001820180549192916200054a9062000c7b565b60606001805480602002602001604051908101604052809291908181526020016000905b828210156200086257838290600052602060002090600502016040518060a0016040529081600082015481526020016001820180546200070a9062000c7b565b80601f0160208091040260200160405190810160405280929190818152602001828054620007389062000c7b565b8015620007895780601f106200075d5761010080835404028352916020019162000789565b820191906000526020600020905b8154815290600101906020018083116200076b57829003601f168201915b50505050508152602001600282018054620007a49062000c7b565b80601f0160208091040260200160405190810160405280929190818152602001828054620007d29062000c7b565b8015620008235780601f10620007f75761010080835404028352916020019162000823565b820191906000526020600020905b8154815290600101906020018083116200080557829003601f168201915b505050918352505060038201546001600160a01b03908116602080840191909152600490930154166040909101529082526001929092019101620006ca565b50505050905090565b613e208062000eee83390190565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620008a157600080fd5b813567ffffffffffffffff80821115620008bf57620008bf62000879565b604051601f8301601f19908116603f01168101908282118183101715620008ea57620008ea62000879565b816040528381528660208588010111156200090457600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b03811681146200093c57600080fd5b919050565b600080600080600080600060e0888a0312156200095d57600080fd5b873567ffffffffffffffff808211156200097657600080fd5b620009848b838c016200088f565b985060208a01359150808211156200099b57600080fd5b620009a98b838c016200088f565b975060408a0135915080821115620009c057600080fd5b620009ce8b838c016200088f565b965060608a0135915080821115620009e557600080fd5b50620009f48a828b016200088f565b9450506080880135925060a0880135915062000a1360c0890162000924565b905092959891949750929550565b60006020828403121562000a3457600080fd5b5035919050565b6000815180845260005b8181101562000a635760208185018101518683018201520162000a45565b506000602082860101526020601f19601f83011685010191505092915050565b85815260a06020820152600062000a9e60a083018762000a3b565b828103604084015262000ab2818762000a3b565b6001600160a01b0395861660608501529390941660809092019190915250949350505050565b60006020828403121562000aeb57600080fd5b62000af68262000924565b9392505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101562000ba957603f19898403018552815160a08151855288820151818a87015262000b558287018262000a3b565b915050878201518582038987015262000b6f828262000a3b565b6060848101516001600160a01b03908116918901919091526080948501511693909601929092525050938601939086019060010162000b24565b509098975050505050505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141762000be75762000be762000bb7565b92915050565b60008262000c0b57634e487b7160e01b600052601260045260246000fd5b500490565b60018060a01b038616815284602082015283604082015260a06060820152600062000c3f60a083018562000a3b565b828103608084015262000c53818562000a3b565b98975050505050505050565b60006001820162000c745762000c7462000bb7565b5060010190565b600181811c9082168062000c9057607f821691505b60208210810362000cb157634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000d0557600081815260208120601f850160051c8101602086101562000ce05750805b601f850160051c820191505b8181101562000d015782815560010162000cec565b5050505b505050565b815167ffffffffffffffff81111562000d275762000d2762000879565b62000d3f8162000d38845462000c7b565b8462000cb7565b602080601f83116001811462000d77576000841562000d5e5750858301515b600019600386901b1c1916600185901b17855562000d01565b600085815260208120601f198616915b8281101562000da85788860151825594840194600190910190840162000d87565b508582101562000dc75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8181038181111562000be75762000be762000bb7565b634e487b7160e01b600052603260045260246000fd5b81810362000e0f575050565b62000e1b825462000c7b565b67ffffffffffffffff81111562000e365762000e3662000879565b62000e478162000d38845462000c7b565b6000601f82116001811462000e7e576000831562000e655750848201545b600019600385901b1c1916600184901b17845562000ee6565b600085815260209020601f19841690600086815260209020845b8381101562000eba578286015482556001958601959091019060200162000e98565b508583101562000ed95781850154600019600388901b60f8161c191681555b50505060018360011b0184555b505050505056fe60806040523480156200001157600080fd5b5060405162003e2038038062003e208339810160408190526200003491620005ec565b6200003f3362000105565b6200004a3262000105565b600380546001600160a01b0319166001600160a01b0387161790553082826200007c87670de0b6b3a7640000620006a1565b6040516200008a9062000511565b620000999493929190620006e9565b604051809103906000f080158015620000b6573d6000803e3d6000fd5b50600880546001600160a01b03929092166001600160a01b03199283168117909155600980549092161790556001839055620000fa670de0b6b3a764000062000155565b5050505050620007c9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6004546000620001668284620002bc565b905080341015620001be5760405162461bcd60e51b815260206004820152601460248201527f496e73756666696369656e74207061796d656e7400000000000000000000000060448201526064015b60405180910390fd5b620001ca838362000735565b6004557ff7dd8a134438de4c59401760e24ef5c6cc9c74583b2b022085697f3021e5976833306001868562000200828962000735565b604080516001600160a01b039788168152959096166020860152921515848601526060840191909152608083015260a082015290519081900360c00190a160085460405163a9059cbb60e01b8152336004820152602481018590526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801562000290573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002b691906200074b565b50505050565b600082600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000313573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000339919062000776565b1015620003895760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420737570706c79206f66207368617265730000006044820152606401620001b5565b600083156200040f576753444835ec580000620003af670de0b6b3a76400008662000790565b620003bc906002620006a1565b620003d090670de0b6b3a764000062000735565b85620003e5670de0b6b3a76400008262000790565b620003f19190620006a1565b620003fd9190620006a1565b620004099190620007a6565b62000412565b60005b90506000841580156200042c575083670de0b6b3a7640000145b620004d3576753444835ec580000846200044f670de0b6b3a76400008862000790565b6200045b919062000735565b62000468906002620006a1565b6200047c90670de0b6b3a764000062000735565b62000488868862000735565b866200049d670de0b6b3a76400008a62000790565b620004a9919062000735565b620004b59190620006a1565b620004c19190620006a1565b620004cd9190620007a6565b620004d6565b60005b90506000620004e6838362000790565b9050600154600a620004f99190620006a1565b620005059082620007a6565b93505050505b92915050565b610f878062002e9983390190565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200055257818101518382015260200162000538565b50506000910152565b600082601f8301126200056d57600080fd5b81516001600160401b03808211156200058a576200058a6200051f565b604051601f8301601f19908116603f01168101908282118183101715620005b557620005b56200051f565b81604052838152866020858801011115620005cf57600080fd5b620005e284602083016020890162000535565b9695505050505050565b600080600080600060a086880312156200060557600080fd5b85516001600160a01b03811681146200061d57600080fd5b60208701516040880151606089015192975090955093506001600160401b03808211156200064a57600080fd5b6200065889838a016200055b565b935060808801519150808211156200066f57600080fd5b506200067e888289016200055b565b9150509295509295909350565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176200050b576200050b6200068b565b60008151808452620006d581602086016020860162000535565b601f01601f19169290920160200192915050565b6001600160a01b03851681526080602082018190526000906200070f90830186620006bb565b8281036040840152620007238186620006bb565b91505082606083015295945050505050565b808201808211156200050b576200050b6200068b565b6000602082840312156200075e57600080fd5b815180151581146200076f57600080fd5b9392505050565b6000602082840312156200078957600080fd5b5051919050565b818103818111156200050b576200050b6200068b565b600082620007c457634e487b7160e01b600052601260045260246000fd5b500490565b6126c080620007d96000396000f3fe6080604052600436106101a05760003560e01c8063715018a6116100ec578063d1a93d181161008a578063f0ad562011610064578063f0ad5620146104bd578063f2fde38b146104dd578063f835cd3c146104fd578063fe9efcaf1461051d57600080fd5b8063d1a93d181461046a578063d77a916c1461047d578063ded98a291461049d57600080fd5b80638da5cb5b116100c65780638da5cb5b146103ff578063b65b29cf1461041d578063ba730e5314610434578063bc6a48aa1461045457600080fd5b8063715018a6146103955780637eec20a8146103aa5780638d977672146103ca57600080fd5b806334b25ee2116101595780635867173011610133578063586717301461032957806359a7b3fe1461033f5780635cf4ee91146103555780635f9443261461037557600080fd5b806334b25ee2146102aa5780634ba8ae81146102ca578063564a565d146102dd57600080fd5b806308d4db14146101d65780630b4ea64414610209578063202a884e1461024157806322022a29146102615780633326de9814610277578063341488691461029757600080fd5b366101d1576000546001600160a01b031632036101cf5734600260008282546101c99190612134565b90915550505b005b600080fd5b3480156101e257600080fd5b506101f66101f1366004612147565b610534565b6040519081526020015b60405180910390f35b34801561021557600080fd5b50600854610229906001600160a01b031681565b6040516001600160a01b039091168152602001610200565b34801561024d57600080fd5b506101cf61025c366004612147565b610548565b34801561026d57600080fd5b506101f660045481565b34801561028357600080fd5b506101cf610292366004612147565b610819565b6101cf6102a5366004612203565b61094b565b3480156102b657600080fd5b506101cf6102c5366004612288565b610cae565b6101cf6102d8366004612147565b61105f565b3480156102e957600080fd5b506103146102f8366004612147565b6007602052600090815260409020805460019091015460ff1682565b60408051928352901515602083015201610200565b34801561033557600080fd5b506101f660065481565b34801561034b57600080fd5b506101f660015481565b34801561036157600080fd5b506101f66103703660046122b8565b611307565b34801561038157600080fd5b506101cf610390366004612147565b611528565b3480156103a157600080fd5b506101cf6115fb565b3480156103b657600080fd5b506101cf6103c5366004612147565b61160f565b3480156103d657600080fd5b506103ea6103e5366004612147565b611833565b60405161020099989796959493929190612336565b34801561040b57600080fd5b506000546001600160a01b0316610229565b34801561042957600080fd5b506101f66201518081565b34801561044057600080fd5b506101f661044f366004612147565b61199f565b34801561046057600080fd5b506101f660025481565b6101cf610478366004612147565b6119b8565b34801561048957600080fd5b50600354610229906001600160a01b031681565b3480156104a957600080fd5b506101cf6104b8366004612288565b611b01565b3480156104c957600080fd5b506101cf6104d8366004612147565b611df7565b3480156104e957600080fd5b506101cf6104f83660046123c2565b611ffb565b34801561050957600080fd5b50600954610229906001600160a01b031681565b34801561052957600080fd5b506101f66203f48081565b600061054260045483611307565b92915050565b60008181526005602052604081205482910361057f5760405162461bcd60e51b8152600401610576906123f2565b60405180910390fd5b6001600083815260056020819052604090912081015460ff16908111156105a8576105a86122da565b1461061b5760405162461bcd60e51b815260206004820152603960248201527f43616e277420736c61736820667265656c616e6365722062656361757365207460448201527f6865207461736b206973206e6f7420696e2070726f67726573000000000000006064820152608401610576565b60008281526005602052604090206002810154600190910154429161063f91612134565b106106835760405162461bcd60e51b815260206004820152601460248201527315185cdac81a5cc81b9bdd081b185d19481e595d60621b6044820152606401610576565b6000828152600560208190526040909120015461010090046001600160a01b031633146106c25760405162461bcd60e51b81526004016105769061241f565b60008281526005602081905260408220908101546004909101546101009091046001600160a01b0316906106f7906002612462565b604051600081818185875af1925050503d8060008114610733576040519150601f19603f3d011682016040523d82523d6000602084013e610738565b606091505b50509050806107595760405162461bcd60e51b815260040161057690612479565b60085460008481526005602081905260409182902090810154600390910154915163a9059cbb60e01b81526101009091046001600160a01b039081166004830152602482019290925291169063a9059cbb906044016020604051808303816000875af11580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f191906124c6565b5060008381526005602081905260409091208101805460ff19166001835b0217905550505050565b6000818152600560205260408120548291036108475760405162461bcd60e51b8152600401610576906123f2565b61084f612074565b6001600083815260056020819052604090912081015460ff1690811115610878576108786122da565b146108be5760405162461bcd60e51b815260206004820152601660248201527515dbdc9ac8185b1c9958591e4819195b1a5d995c995960521b6044820152606401610576565b6000828152600560205260409020600281015460019091015442916108e291612134565b10156109225760405162461bcd60e51b815260206004820152600f60248201526e5461736b206973206f76657264756560881b6044820152606401610576565b60008281526005602081905260409091200180546003919060ff19166001835b02179055505050565b600061095684610534565b90508060025410156109c05760405162461bcd60e51b815260206004820152602d60248201527f467265656c616e6365722773207374616b65206973206c657373207468616e2060448201526c312073686172652076616c756560981b6064820152608401610576565b803414610a255760405162461bcd60e51b815260206004820152602d60248201527f436c69656e74207374616b65206973206e6f7420657175616c20746f2074686560448201526c207368617265732076616c756560981b6064820152608401610576565b6008546040516370a0823160e01b815233600482015285916001600160a01b0316906370a0823190602401602060405180830381865afa158015610a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9191906124e3565b1015610ad55760405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e742073686172657360681b6044820152606401610576565b60068054906000610ae5836124fc565b90915550506040805161012081018252600654815260006020820152908101610b116201518088612134565b8152602081018690526040810183905260600160008152602001336001600160a01b0316815260200184815260200183815250600560006006548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690836005811115610bb557610bb56122da565b021790555060c08201516005820180546001600160a01b0390921661010002610100600160a81b031990921691909117905560e08201516006820190610bfb9082612595565b506101008201516007820190610c119082612595565b5050600854600654600090815260056020526040908190206003015490516323b872dd60e01b815233600482015230602482015260448101919091526001600160a01b0390911691506323b872dd906064016020604051808303816000875af1158015610c82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca691906124c6565b505050505050565b600082815260056020526040812054839103610cdc5760405162461bcd60e51b8152600401610576906123f2565b60008381526007602052604090206001015460ff16610d3d5760405162461bcd60e51b815260206004820152601860248201527f4469737075746520616c7265616479207265736f6c76656400000000000000006044820152606401610576565b6003546001600160a01b03163314610d975760405162461bcd60e51b815260206004820152601d60248201527f596f7520617265206e6f742074686520646973707574652061646d696e0000006044820152606401610576565b8115610efd576000838152600560205260408120600401546002805491929091610dc2908490612655565b909155505060008381526005602081905260408220908101546004909101546101009091046001600160a01b031690610dfc906002612462565b604051600081818185875af1925050503d8060008114610e38576040519150601f19603f3d011682016040523d82523d6000602084013e610e3d565b606091505b5050905080610e5e5760405162461bcd60e51b815260040161057690612479565b60085460008581526005602081905260409182902090810154600390910154915163a9059cbb60e01b81526101009091046001600160a01b039081166004830152602482019290925291169063a9059cbb906044016020604051808303816000875af1158015610ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef691906124c6565b5050611026565b6008546001600160a01b031663a9059cbb610f206000546001600160a01b031690565b6000868152600560205260409081902060030154905160e084901b6001600160e01b03191681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa291906124c6565b5060008054848252600560205260408083206004015490516001600160a01b03909216918381818185875af1925050503d8060008114610ffe576040519150601f19603f3d011682016040523d82523d6000602084013e611003565b606091505b50509050806110245760405162461bcd60e51b815260040161057690612479565b505b505060009081526005602081815260408084208301805460ff199081169094179055600790915290912060019081018054909216179055565b6004548181116110b15760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742073656c6c20746865206c6173742073686172650000000000006044820152606401610576565b60006110c66110c08484612655565b84611307565b6008546040516370a0823160e01b815233600482015291925084916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611113573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113791906124e3565b101561117b5760405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e742073686172657360681b6044820152606401610576565b6111858383612655565b6004557ff7dd8a134438de4c59401760e24ef5c6cc9c74583b2b022085697f3021e597683330600086856111b98289612655565b604080516001600160a01b039788168152959096166020860152921515848601526060840191909152608083015260a082015290519081900360c00190a1604051600090339083908381818185875af1925050503d8060008114611239576040519150601f19603f3d011682016040523d82523d6000602084013e61123e565b606091505b50506008546040516323b872dd60e01b8152336004820152306024820152604481018790529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611298573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bc91906124c6565b50806113015760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610576565b50505050565b600082600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561135d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138191906124e3565b10156113cf5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420737570706c79206f66207368617265730000006044820152606401610576565b60008315611445576753444835ec5800006113f2670de0b6b3a764000086612655565b6113fd906002612462565b61140f90670de0b6b3a7640000612134565b85611422670de0b6b3a764000082612655565b61142c9190612462565b6114369190612462565b6114409190612668565b611448565b60005b9050600084158015611461575083670de0b6b3a7640000145b6114f2576753444835ec58000084611481670de0b6b3a764000088612655565b61148b9190612134565b611496906002612462565b6114a890670de0b6b3a7640000612134565b6114b28688612134565b866114c5670de0b6b3a76400008a612655565b6114cf9190612134565b6114d99190612462565b6114e39190612462565b6114ed9190612668565b6114f5565b60005b905060006115038383612655565b9050600154600a6115149190612462565b61151e9082612668565b9695505050505050565b6000818152600560205260408120548291036115565760405162461bcd60e51b8152600401610576906123f2565b61155e612074565b6000828152600560208190526040822081015460ff1690811115611584576115846122da565b146115d15760405162461bcd60e51b815260206004820181905260248201527f5461736b20616c72656164792073746172746564206f722063616e63656c65646044820152606401610576565b6000828152600560208190526040909120426001808301919091559101805460ff19168280610942565b611603612074565b61160d60006120ce565b565b60008181526005602052604081205482910361163d5760405162461bcd60e51b8152600401610576906123f2565b6000828152600560208190526040909120015461010090046001600160a01b0316331461167c5760405162461bcd60e51b81526004016105769061241f565b6000828152600560208190526040822081015460ff16908111156116a2576116a26122da565b146116e65760405162461bcd60e51b815260206004820152601460248201527315185cdac8185b1c9958591e481cdd185c9d195960621b6044820152606401610576565b60008281526005602081905260408083209182015460049092015490516101009092046001600160a01b03169160006040518083038185875af1925050503d8060008114611750576040519150601f19603f3d011682016040523d82523d6000602084013e611755565b606091505b50509050806117765760405162461bcd60e51b815260040161057690612479565b60085460008481526005602081905260409182902090810154600390910154915163a9059cbb60e01b81526101009091046001600160a01b039081166004830152602482019290925291169063a9059cbb906044016020604051808303816000875af11580156117ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180e91906124c6565b5060008381526005602081905260409091200180546002919060ff191660018361080f565b6005602081905260009182526040909120805460018201546002830154600384015460048501549585015460068601805495979496939592949360ff8316936101009093046001600160a01b03169290919061188e90612515565b80601f01602080910402602001604051908101604052809291908181526020018280546118ba90612515565b80156119075780601f106118dc57610100808354040283529160200191611907565b820191906000526020600020905b8154815290600101906020018083116118ea57829003601f168201915b50505050509080600701805461191c90612515565b80601f016020809104026020016040519081016040528092919081815260200182805461194890612515565b80156119955780601f1061196a57610100808354040283529160200191611995565b820191906000526020600020905b81548152906001019060200180831161197857829003601f168201915b5050505050905089565b6000610542826004546119b29190612655565b83611307565b60045460006119c78284611307565b905080341015611a105760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606401610576565b611a1a8383612134565b6004557ff7dd8a134438de4c59401760e24ef5c6cc9c74583b2b022085697f3021e59768333060018685611a4e8289612134565b604080516001600160a01b039788168152959096166020860152921515848601526060840191909152608083015260a082015290519081900360c00190a160085460405163a9059cbb60e01b8152336004820152602481018590526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611add573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130191906124c6565b600082815260056020526040812054839103611b2f5760405162461bcd60e51b8152600401610576906123f2565b6000838152600560208190526040909120015461010090046001600160a01b03163314611b6e5760405162461bcd60e51b81526004016105769061241f565b6003600084815260056020819052604090912081015460ff1690811115611b9757611b976122da565b14611bdd5760405162461bcd60e51b815260206004820152601660248201527515dbdc9ac81b9bdd0819195b1a5d995c9959081e595d60521b6044820152606401610576565b6000838152600560205260409020600281015460019091015442916203f48091611c079190612134565b611c119190612134565b1015611c5f5760405162461bcd60e51b815260206004820152601e60248201527f5461736b206973206f76657264756520666f722076616c69646174696f6e00006044820152606401610576565b8115611d99576000838152600560208181526040808420808401805460ff19169094179093556008548454600390940154825163a9059cbb60e01b81526001600160a01b0395861660048201526024810191909152915193169363a9059cbb936044808401949391929183900301908290875af1158015611ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0891906124c6565b5060008381526005602081905260408083209182015460049092015490516101009092046001600160a01b03169160006040518083038185875af1925050503d8060008114611d73576040519150601f19603f3d011682016040523d82523d6000602084013e611d78565b606091505b50509050806113015760405162461bcd60e51b815260040161057690612479565b505060008181526005602081815260408084209092018054600460ff1991821617909155825180840184524281528083018581529585526007909252919092209151825591516001919091018054909216901515179055565b505050565b600081815260056020526040812054829103611e255760405162461bcd60e51b8152600401610576906123f2565b611e2d612074565b6003600083815260056020819052604090912081015460ff1690811115611e5657611e566122da565b14611eb35760405162461bcd60e51b815260206004820152602760248201527f5461736b206973206e6f7420696e2074686520736c617368656420636c69656e6044820152667420737461746560c81b6064820152608401610576565b6000828152600560205260409020600281015460019091015442916203f48091611edd9190612134565b611ee79190612134565b10611f345760405162461bcd60e51b815260206004820152601f60248201527f5461736b2076616c69646174696f6e206973206e6f74206c61746520796574006044820152606401610576565b6008546001600160a01b031663a9059cbb611f576000546001600160a01b031690565b6000858152600560205260409081902060030154905160e084901b6001600160e01b03191681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd991906124c6565b5060008281526005602081905260409091208101805460ff1916600183610942565b612003612074565b6001600160a01b0381166120685760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610576565b612071816120ce565b50565b6000546001600160a01b0316331461160d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610576565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052601160045260246000fd5b808201808211156105425761054261211e565b60006020828403121561215957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261218757600080fd5b813567ffffffffffffffff808211156121a2576121a2612160565b604051601f8301601f19908116603f011681019082821181831017156121ca576121ca612160565b816040528381528660208588010111156121e357600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561221957600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561223f57600080fd5b61224b88838901612176565b9350606087013591508082111561226157600080fd5b5061226e87828801612176565b91505092959194509250565b801515811461207157600080fd5b6000806040838503121561229b57600080fd5b8235915060208301356122ad8161227a565b809150509250929050565b600080604083850312156122cb57600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b6000815180845260005b81811015612316576020818501810151868301820152016122fa565b506000602082860101526020601f19601f83011685010191505092915050565b60006101208b83528a60208401528960408401528860608401528760808401526006871061237457634e487b7160e01b600052602160045260246000fd5b60a083018790526001600160a01b03861660c084015260e0830181905261239d818401866122f0565b90508281036101008401526123b281856122f0565b9c9b505050505050505050505050565b6000602082840312156123d457600080fd5b81356001600160a01b03811681146123eb57600080fd5b9392505050565b60208082526013908201527215185cdac8191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b60208082526023908201527f596f7520617265206e6f742074686520636c69656e74206f662074686973207460408201526261736b60e81b606082015260800190565b80820281158282048414176105425761054261211e565b6020808252602d908201527f4661696c656420746f2073656e6420746865207374616b6520616d6f756e742060408201526c1d1bc81d1a194818db1a595b9d609a1b606082015260800190565b6000602082840312156124d857600080fd5b81516123eb8161227a565b6000602082840312156124f557600080fd5b5051919050565b60006001820161250e5761250e61211e565b5060010190565b600181811c9082168061252957607f821691505b60208210810361254957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611df257600081815260208120601f850160051c810160208610156125765750805b601f850160051c820191505b81811015610ca657828155600101612582565b815167ffffffffffffffff8111156125af576125af612160565b6125c3816125bd8454612515565b8461254f565b602080601f8311600181146125f857600084156125e05750858301515b600019600386901b1c1916600185901b178555610ca6565b600085815260208120601f198616915b8281101561262757888601518255948401946001909101908401612608565b50858210156126455787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818103818111156105425761054261211e565b60008261268557634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220f91e9684f167f869c8b31b911e5d78989c75cdf4e9fa7f0213310872838fdf9864736f6c6343000814003360806040523480156200001157600080fd5b5060405162000f8738038062000f8783398101604081905262000034916200026c565b828260036200004483826200038c565b5060046200005382826200038c565b505050620000706200006a6200008660201b60201c565b6200008a565b6200007c8482620000dc565b5050505062000480565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216620001375760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b80600260008282546200014b919062000458565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001cf57600080fd5b81516001600160401b0380821115620001ec57620001ec620001a7565b604051601f8301601f19908116603f01168101908282118183101715620002175762000217620001a7565b816040528381526020925086838588010111156200023457600080fd5b600091505b8382101562000258578582018301518183018401529082019062000239565b600093810190920192909252949350505050565b600080600080608085870312156200028357600080fd5b84516001600160a01b03811681146200029b57600080fd5b60208601519094506001600160401b0380821115620002b957600080fd5b620002c788838901620001bd565b94506040870151915080821115620002de57600080fd5b50620002ed87828801620001bd565b606096909601519497939650505050565b600181811c908216806200031357607f821691505b6020821081036200033457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001a257600081815260208120601f850160051c81016020861015620003635750805b601f850160051c820191505b8181101562000384578281556001016200036f565b505050505050565b81516001600160401b03811115620003a857620003a8620001a7565b620003c081620003b98454620002fe565b846200033a565b602080601f831160018114620003f85760008415620003df5750858301515b600019600386901b1c1916600185901b17855562000384565b600085815260208120601f198616915b82811015620004295788860151825594840194600190910190840162000408565b5085821015620004485787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200047a57634e487b7160e01b600052601160045260246000fd5b92915050565b610af780620004906000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d7146101eb578063a9059cbb146101fe578063dd62ed3e14610211578063f2fde38b1461022457600080fd5b806370a0823114610197578063715018a6146101c05780638da5cb5b146101c857806395d89b41146101e357600080fd5b806323b872dd116100d357806323b872dd1461014d578063313ce56714610160578063395093511461016f57806340c10f191461018257600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b610102610237565b60405161010f9190610941565b60405180910390f35b61012b6101263660046109ab565b6102c9565b604051901515815260200161010f565b6002545b60405190815260200161010f565b61012b61015b3660046109d5565b6102e3565b6040516012815260200161010f565b61012b61017d3660046109ab565b610307565b6101956101903660046109ab565b610329565b005b61013f6101a5366004610a11565b6001600160a01b031660009081526020819052604090205490565b61019561033f565b6005546040516001600160a01b03909116815260200161010f565b610102610353565b61012b6101f93660046109ab565b610362565b61012b61020c3660046109ab565b6103e2565b61013f61021f366004610a33565b6103f0565b610195610232366004610a11565b61041b565b60606003805461024690610a66565b80601f016020809104026020016040519081016040528092919081815260200182805461027290610a66565b80156102bf5780601f10610294576101008083540402835291602001916102bf565b820191906000526020600020905b8154815290600101906020018083116102a257829003601f168201915b5050505050905090565b6000336102d7818585610494565b60019150505b92915050565b6000336102f18582856105b8565b6102fc858585610632565b506001949350505050565b6000336102d781858561031a83836103f0565b6103249190610aa0565b610494565b6103316107d6565b61033b8282610830565b5050565b6103476107d6565b61035160006108ef565b565b60606004805461024690610a66565b6000338161037082866103f0565b9050838110156103d55760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102fc8286868403610494565b6000336102d7818585610632565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6104236107d6565b6001600160a01b0381166104885760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103cc565b610491816108ef565b50565b6001600160a01b0383166104f65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103cc565b6001600160a01b0382166105575760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103cc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006105c484846103f0565b9050600019811461062c578181101561061f5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103cc565b61062c8484848403610494565b50505050565b6001600160a01b0383166106965760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103cc565b6001600160a01b0382166106f85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103cc565b6001600160a01b038316600090815260208190526040902054818110156107705760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103cc565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361062c565b6005546001600160a01b031633146103515760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103cc565b6001600160a01b0382166108865760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103cc565b80600260008282546108989190610aa0565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208083528351808285015260005b8181101561096e57858101830151858201604001528201610952565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146109a657600080fd5b919050565b600080604083850312156109be57600080fd5b6109c78361098f565b946020939093013593505050565b6000806000606084860312156109ea57600080fd5b6109f38461098f565b9250610a016020850161098f565b9150604084013590509250925092565b600060208284031215610a2357600080fd5b610a2c8261098f565b9392505050565b60008060408385031215610a4657600080fd5b610a4f8361098f565b9150610a5d6020840161098f565b90509250929050565b600181811c90821680610a7a57607f821691505b602082108103610a9a57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102dd57634e487b7160e01b600052601160045260246000fdfea2646970667358221220f8855897da80d1e84b2f02d265a9c0415e19ebf1c6e7ef53cf0043a09c137b8f64736f6c63430008140033a2646970667358221220ff4ed53ffaba67f6b05e54f38d3a9cd22b439afb1004cf9b8521aaa89f84cf5e64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 846,
        "contract": "contracts/ContractFactory.sol:ContractFactory",
        "label": "idCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 850,
        "contract": "contracts/ContractFactory.sol:ContractFactory",
        "label": "freelancers",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(FreelancerInfo)844_storage)dyn_storage"
      },
      {
        "astId": 855,
        "contract": "contracts/ContractFactory.sol:ContractFactory",
        "label": "freelancerInfoMapping",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(FreelancerInfo)844_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(FreelancerInfo)844_storage)dyn_storage": {
        "base": "t_struct(FreelancerInfo)844_storage",
        "encoding": "dynamic_array",
        "label": "struct ContractFactory.FreelancerInfo[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(FreelancerInfo)844_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ContractFactory.FreelancerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(FreelancerInfo)844_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FreelancerInfo)844_storage": {
        "encoding": "inplace",
        "label": "struct ContractFactory.FreelancerInfo",
        "members": [
          {
            "astId": 835,
            "contract": "contracts/ContractFactory.sol:ContractFactory",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 837,
            "contract": "contracts/ContractFactory.sol:ContractFactory",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 839,
            "contract": "contracts/ContractFactory.sol:ContractFactory",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 841,
            "contract": "contracts/ContractFactory.sol:ContractFactory",
            "label": "stakingContractAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 843,
            "contract": "contracts/ContractFactory.sol:ContractFactory",
            "label": "owner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}