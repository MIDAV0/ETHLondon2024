{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ContractFactory.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./StakingContract.sol\";\n\ncontract ContractFactory {\n\tuint256 public constant MIN_HOURS = 24;\n\tuint256 public constant MAX_HOURS = 720;\n\n\tstruct FreelancerInfo {\n\t\tuint256 id;\n\t\tstring name;\n\t\tstring description;\n\t\taddress stakingContractAddress;\n\t\taddress owner;\n\t}\n\n\tuint256 public idCounter;\n\tFreelancerInfo[] public freelancers;\n\tmapping (address => FreelancerInfo) public freelancerInfoMapping;\n\n\tfunction createContract(\n\t\tstring memory name,\n\t\tstring memory description,\n\t\tstring memory tokenName,\n\t\tstring memory tokenSymbol,\n\t\tuint256 numberOfShares,\n\t\tuint256 stakeAmount,\n\t\taddress _disputeAdmin\n\t) public payable {\n\t\trequire(msg.value == stakeAmount, \"Insufficient Stake Amount\");\n\t\trequire(\n\t\t\tnumberOfShares <= MAX_HOURS && numberOfShares >= MIN_HOURS,\n\t\t\t\"Invalid number of shares. Should be within 24 and 720 hours\"\n\t\t);\n\t\tuint256 hourlyRateForCurve = (numberOfShares * 1 ether * 1 ether) / stakeAmount;\n\t\t// uint256 hourlyRate = (stakeAmount * 1 ether) / numberOfShares;\n\t\tStakingContract stakingContract = new StakingContract(\n\t\t\t_disputeAdmin,\n\t\t\tnumberOfShares,\n\t\t\thourlyRateForCurve,\n\t\t\ttokenName,\n\t\t\ttokenSymbol\n\t\t);\n\t\t// Transfer the stake amount to the staking contract\n\n\t\t(bool success, ) = payable(address(stakingContract)).call{\n\t\t\tvalue: msg.value\n\t\t}(\"\");\n\t\trequire(success, \"Stake transfer failed\");\n\t\tfreelancers.push(\n\t\t\tFreelancerInfo(\n\t\t\t\tidCounter++,\n\t\t\t\tname,\n\t\t\t\tdescription,\n\t\t\t\taddress(stakingContract),\n\t\t\t\tmsg.sender\n\t\t\t)\n\t\t);\n\t\tfreelancerInfoMapping[msg.sender] = freelancers[freelancers.length - 1];\n\t}\n\n\tfunction getFreelancers() public view returns (FreelancerInfo[] memory) {\n\t\treturn freelancers;\n\t}\n\n\treceive() external payable {}\n}\n"
    },
    "contracts/EmployeeToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract EmployeeToken is ERC20, Ownable {\n\tconstructor(\n\t\taddress initialOwner,\n\t\tstring memory name,\n\t\tstring memory symbol,\n\t\tuint256 initialSupply\n\t) ERC20(name, symbol) {\n\t\t_mint(initialOwner, initialSupply);\n\t}\n\n\tfunction mint(address to, uint256 amount) public onlyOwner {\n\t\t_mint(to, amount);\n\t}\n}\n"
    },
    "contracts/StakingContract.sol": {
      "content": "//SPDX-License-Identifier: Unlic ense\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./EmployeeToken.sol\";\n\ncontract StakingContract is Ownable {\n\t/// @dev Validation period for the client to confirm the work delivered by the freelancer\n\tuint256 public constant VALIDATION_PERIOD = 3 days;\n\t/// @dev Buffer period for the freelancer to deliver the work. Adds to the deadline\n\tuint256 public constant BUFFER_PERIOD = 1 days;\n\n\tuint256 public hourlyRate;\n\n\tuint256 public freelancerStake;\n\n\taddress public disputeAdmin;\n\n\tuint256 public sharesSupply;\n\n\tevent Trade(\n\t\taddress trader,\n\t\taddress subject,\n\t\tbool isBuy,\n\t\tuint256 shareAmount,\n\t\tuint256 ethAmount,\n\t\tuint256 supply\n\t);\n\n\tenum TaskStatus {\n\t\tNOT_STARTED,\n\t\tIN_PROGRESS,\n\t\tCANCELED,\n\t\tWORK_DELIVERED,\n\t\tWORK_VALIDATED,\n\t\tWORK_COMPLETED\n\t}\n\n\tstruct Task {\n\t\tuint256 id;\n\t\tuint256 startTime;\n\t\tuint256 duration;\n\t\tuint256 shares;\n\t\tuint256 stakeAmount;\n\t\tTaskStatus status;\n\t\taddress client;\n\t\tstring title;\n\t\tstring description;\n\t}\n\n\tstruct Dispute {\n\t\tuint256 createdAt;\n\t\tbool isResolved;\n\t}\n\n\tmodifier taskExists(uint256 taskId) {\n\t\trequire(tasks[taskId].id != 0, \"Task does not exist\");\n\t\t_;\n\t}\n\n\tmapping(uint256 => Task) public tasks;\n\tuint256 public taskCounter;\n\tmapping(uint256 => Dispute) public disputes;\n\n\tEmployeeToken public _EmployeeToken;\n\taddress public erc20TokenAddress;\n\n\tconstructor(\n\t\taddress _disputeAdmin, // address of the dispute admin\n\t\tuint256 initialSupplyOfShares,\n\t\tuint256 _hourlyRate,\n\t\tstring memory name,\n\t\tstring memory symbol\n\t) {\n\t\t_transferOwnership(tx.origin);\n\t\tdisputeAdmin = _disputeAdmin;\n\t\t// Calculate t\n\t\t_EmployeeToken = new EmployeeToken(\n\t\t\taddress(this),\n\t\t\tname,\n\t\t\tsymbol,\n\t\t\tinitialSupplyOfShares * 1 ether\n\t\t);\n\t\terc20TokenAddress = address(_EmployeeToken);\n\t\thourlyRate = _hourlyRate;\n\t\tbuyShares(1 ether);\n\t}\n\n\t/// @dev Function to create task for the freelancer. Client also has to stake some amount of ETH equal to the shares value.\n\t/// @param duration The duration of the task in hours\n\t/// @param _shares The amount of shares the client wants to stake.\n\tfunction createTask(\n\t\tuint256 duration,\n\t\tuint256 _shares,\n\t\tstring memory title,\n\t\tstring memory description\n\t) public payable {\n\t\t// Check that frelancer's stake is more or equal to 1 share value\n\t\tuint256 sharesPrice = getBuyPrice(_shares);\n\t\trequire(\n\t\t\tfreelancerStake >= sharesPrice,\n\t\t\t\"Freelancer's stake is less than 1 share value\"\n\t\t);\n\t\trequire(\n\t\t\tmsg.value == sharesPrice,\n\t\t\t\"Client stake is not equal to the shares value\"\n\t\t);\n\t\trequire(\n\t\t\t_EmployeeToken.balanceOf(msg.sender) >= _shares,\n\t\t\t\"Insufficient shares\"\n\t\t);\n\n\t\ttaskCounter++;\n\n\t\ttasks[taskCounter] = Task({\n\t\t\tid: taskCounter,\n\t\t\tstartTime: 0,\n\t\t\tduration: duration + BUFFER_PERIOD,\n\t\t\tshares: _shares,\n\t\t\tstakeAmount: sharesPrice,\n\t\t\tstatus: TaskStatus.NOT_STARTED,\n\t\t\tclient: msg.sender,\n\t\t\ttitle: title,\n\t\t\tdescription: description\n\t\t});\n\n\t\t// Client transfers the int amount of shares to the contract\n\t\t_EmployeeToken.transferFrom(\n\t\t\tmsg.sender,\n\t\t\taddress(this),\n\t\t\ttasks[taskCounter].shares\n\t\t);\n\t}\n\n\t/// @dev Function to start the task. Called by the freelancer\n\tfunction startTask(uint256 taskId) public taskExists(taskId) onlyOwner {\n\t\trequire(\n\t\t\ttasks[taskId].status == TaskStatus.NOT_STARTED,\n\t\t\t\"Task already started or canceled\"\n\t\t);\n\n\t\ttasks[taskId].startTime = block.timestamp;\n\t\ttasks[taskId].status = TaskStatus.IN_PROGRESS;\n\t}\n\n\tfunction cancelTask(uint256 taskId) public taskExists(taskId) {\n\t\trequire(\n\t\t\ttasks[taskId].client == msg.sender,\n\t\t\t\"You are not the client of this task\"\n\t\t);\n\t\trequire(\n\t\t\ttasks[taskId].status == TaskStatus.NOT_STARTED,\n\t\t\t\"Task already started\"\n\t\t);\n\n\t\t// Send the client's stake back\n\t\t(bool success, ) = tasks[taskId].client.call{\n\t\t\tvalue: tasks[taskId].stakeAmount\n\t\t}(\"\");\n\t\trequire(success, \"Failed to send the stake amount to the client\");\n\n\t\t// Release the clien's shares\n\t\t_EmployeeToken.transfer(tasks[taskId].client, tasks[taskId].shares);\n\n\t\ttasks[taskId].status = TaskStatus.CANCELED;\n\t}\n\n\t/// @dev Function to slash the freelancer if they don't deliver the work on time\n\tfunction slashFreelancer(uint256 taskId) public taskExists(taskId) {\n\t\t// slash freelancer\n\t\trequire(\n\t\t\ttasks[taskId].status == TaskStatus.IN_PROGRESS,\n\t\t\t\"Can't slash freelancer because the task is not in progres\"\n\t\t);\n\t\trequire(\n\t\t\ttasks[taskId].startTime + tasks[taskId].duration < block.timestamp,\n\t\t\t\"Task is not late yet\"\n\t\t);\n\t\trequire(\n\t\t\ttasks[taskId].client == msg.sender,\n\t\t\t\"You are not the client of this task\"\n\t\t);\n\n\t\t// slash freelancer. Send freelancer's stake to the client\n\t\t(bool success, ) = tasks[taskId].client.call{\n\t\t\tvalue: 2 * tasks[taskId].stakeAmount\n\t\t}(\"\");\n\t\trequire(success, \"Failed to send the stake amount to the client\");\n\n\t\t// Send locked shares to the client\n\t\t_EmployeeToken.transfer(tasks[taskId].client, tasks[taskId].shares);\n\n\t\ttasks[taskId].status = TaskStatus.WORK_COMPLETED;\n\t}\n\n\t/// @dev Function that freelancer calls when client takes too long to validate the work\n\tfunction slashClient(uint256 taskId) public taskExists(taskId) onlyOwner {\n\t\trequire(\n\t\t\ttasks[taskId].status == TaskStatus.WORK_DELIVERED,\n\t\t\t\"Task is not in the slashed client state\"\n\t\t);\n\t\trequire(\n\t\t\ttasks[taskId].startTime +\n\t\t\t\ttasks[taskId].duration +\n\t\t\t\tVALIDATION_PERIOD <\n\t\t\t\tblock.timestamp,\n\t\t\t\"Task validation is not late yet\"\n\t\t);\n\t\t// Release the freelancer's payment\n\t\t_EmployeeToken.transfer(owner(), tasks[taskId].shares);\n\n\t\t// Where should we send the client's stake?\n\n\t\ttasks[taskId].status = TaskStatus.WORK_COMPLETED;\n\t}\n\n\t/// @dev Function that freelancer  calls to confirm that they have delivered the work\n\t/// @param taskId The id of the task\n\tfunction confirmWorkDeleveredFreelancer(\n\t\tuint256 taskId\n\t) public taskExists(taskId) onlyOwner {\n\t\t// confirm work delivered\n\t\trequire(\n\t\t\ttasks[taskId].status == TaskStatus.IN_PROGRESS,\n\t\t\t\"Work already delivered\"\n\t\t);\n\t\trequire(\n\t\t\ttasks[taskId].startTime + tasks[taskId].duration >= block.timestamp,\n\t\t\t\"Task is overdue\"\n\t\t);\n\n\t\ttasks[taskId].status = TaskStatus.WORK_DELIVERED;\n\t}\n\n\t/// @dev Function that client calls to confirm that they have received the work from freelancer\n\tfunction confirmWorkCompletedClient(\n\t\tuint256 taskId,\n\t\tbool delivered\n\t) public taskExists(taskId) {\n\t\trequire(\n\t\t\ttasks[taskId].client == msg.sender,\n\t\t\t\"You are not the client of this task\"\n\t\t);\n\t\trequire(\n\t\t\ttasks[taskId].status == TaskStatus.WORK_DELIVERED,\n\t\t\t\"Work not delivered yet\"\n\t\t);\n\t\trequire(\n\t\t\ttasks[taskId].startTime +\n\t\t\t\ttasks[taskId].duration +\n\t\t\t\tVALIDATION_PERIOD >=\n\t\t\t\tblock.timestamp,\n\t\t\t\"Task is overdue for validation\"\n\t\t);\n\n\t\tif (delivered) {\n\t\t\ttasks[taskId].status = TaskStatus.WORK_COMPLETED;\n\t\t\t// release the freelancer's payment\n\t\t\t_EmployeeToken.transfer(owner(), tasks[taskId].shares);\n\n\t\t\t(bool success, ) = tasks[taskId].client.call{\n\t\t\t\tvalue: tasks[taskId].stakeAmount\n\t\t\t}(\"\");\n\t\t\trequire(success, \"Failed to send the stake amount to the client\");\n\t\t} else {\n\t\t\ttasks[taskId].status = TaskStatus.WORK_VALIDATED;\n\t\t\tcreateDispute(taskId);\n\t\t}\n\t}\n\n\tfunction createDispute(uint256 taskId) internal {\n\t\tdisputes[taskId] = Dispute({\n\t\t\tcreatedAt: block.timestamp,\n\t\t\tisResolved: false\n\t\t});\n\t}\n\n\tfunction resolveDispute(\n\t\tuint256 taskId,\n\t\tbool isClientRight\n\t) public taskExists(taskId) {\n\t\trequire(disputes[taskId].isResolved, \"Dispute already resolved\");\n\t\trequire(msg.sender == disputeAdmin, \"You are not the dispute admin\");\n\n\t\tif (isClientRight) {\n\t\t\t// Slash the freelancer and send the client's stake back\n\t\t\tfreelancerStake -= tasks[taskId].stakeAmount;\n\t\t\t(bool success, ) = tasks[taskId].client.call{\n\t\t\t\tvalue: 2 * tasks[taskId].stakeAmount\n\t\t\t}(\"\");\n\t\t\trequire(success, \"Failed to send the stake amount to the client\");\n\n\t\t\t// Send locked shares to the client\n\t\t\t_EmployeeToken.transfer(tasks[taskId].client, tasks[taskId].shares);\n\t\t} else {\n\t\t\t// Release the freelancer's payment\n\t\t\t_EmployeeToken.transfer(owner(), tasks[taskId].shares);\n\n\t\t\t// Send the client's stake to the freelancer\n\t\t\t(bool success, ) = owner().call{ value: tasks[taskId].stakeAmount }(\n\t\t\t\t\"\"\n\t\t\t);\n\t\t\trequire(success, \"Failed to send the stake amount to the client\");\n\t\t}\n\t\ttasks[taskId].status = TaskStatus.WORK_COMPLETED;\n\t\tdisputes[taskId].isResolved = true;\n\t}\n\n\tfunction getPrice(\n\t\tuint256 supply,\n\t\tuint256 amount\n\t) public view returns (uint256) {\n\t\trequire(_EmployeeToken.totalSupply() >= supply, \"Insufficient supply of shares\");\n\t\tuint256 sum1 = supply == 0\n\t\t\t? 0\n\t\t\t: ((supply - 1 ether) * (supply) * (2 * (supply - 1 ether) + 1 ether)) / 6 ether;\n\t\tuint256 sum2 = supply == 0 && amount == 1 ether\n\t\t\t? 0\n\t\t\t: ((supply - 1 ether + amount) *\n\t\t\t\t(supply + amount) *\n\t\t\t\t(2 * (supply - 1 ether + amount) + 1 ether)) / 6 ether;\n\t\tuint256 summation = sum2 - sum1;\n\t\treturn summation / (hourlyRate * 10);\n\t}\n\n\tfunction getBuyPrice(\n\t\tuint256 amount\n\t) public view returns (uint256) {\n\t\treturn getPrice(sharesSupply, amount);\n\t}\n\n\tfunction getSellPrice(\n\t\tuint256 amount\n\t) public view returns (uint256) {\n\t\treturn getPrice(sharesSupply - amount, amount);\n\t}\n\n\tfunction buyShares(uint256 amount) public payable {\n\t\tuint256 supply = sharesSupply;\n\t\t// require(\n\t\t// \tsupply > 0 || sharesSubject == address(this),\n\t\t// \t\"Only the shares' subject can buy the first share\"\n\t\t// );\n\t\tuint256 price = getPrice(supply, amount);\n\t\trequire(msg.value >= price, \"Insufficient payment\");\n\t\tsharesSupply = supply + amount;\n\t\temit Trade(\n\t\t\tmsg.sender,\n\t\t\taddress(this),\n\t\t\ttrue,\n\t\t\tamount,\n\t\t\tprice,\n\t\t\tsupply + amount\n\t\t);\n\t\t_EmployeeToken.transfer(msg.sender, amount);\n\t}\n\n\tfunction sellShares(uint256 amount) public payable {\n\t\tuint256 supply = sharesSupply;\n\t\trequire(supply > amount, \"Cannot sell the last share\");\n\t\tuint256 price = getPrice(supply - amount, amount);\n\t\trequire(_EmployeeToken.balanceOf(msg.sender) >= amount, \"Insufficient shares\");\n\t\tsharesSupply = supply - amount;\n\t\temit Trade(\n\t\t\tmsg.sender,\n\t\t\taddress(this),\n\t\t\tfalse,\n\t\t\tamount,\n\t\t\tprice,\n\t\t\tsupply - amount\n\t\t);\n\t\t(bool sent, ) = payable(msg.sender).call{ value: price }(\"\");\n\t\t_EmployeeToken.transferFrom(msg.sender, address(this), amount);\n\t\trequire(sent, \"Failed to send Ether\");\n\t}\n\n\treceive() external payable {\n\t\tif (tx.origin == owner()) {\n\t\t\tfreelancerStake += msg.value;\n\t\t}\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}