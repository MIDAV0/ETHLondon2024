{
  "address": "0x5e0B21926c7EF962Ce6C0eeB62C5B2733eEb3DE6",
  "abi": [
    {
      "inputs": [],
      "name": "MAX_HOURS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_HOURS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "numberOfShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_disputeAdmin",
          "type": "address"
        }
      ],
      "name": "createContract",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "freelancers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "stakingContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFreelancerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x91a04add216b8040a6d64df6645fe05b273611ec1ea0b96f5ecdac8fa5e41bb1",
  "receipt": {
    "to": null,
    "from": "0xcC2042a7c7997a04e26389B9689f2AE766342732",
    "contractAddress": "0x5e0B21926c7EF962Ce6C0eeB62C5B2733eEb3DE6",
    "transactionIndex": 4,
    "gasUsed": "3673483",
    "logsBloom": "0x
    "blockHash": "0x4daf57c519e641d1cf3fc6d3081a9fea1f454e4b5f3db007b165b97cf827e9b5",
    "transactionHash": "0x91a04add216b8040a6d64df6645fe05b273611ec1ea0b96f5ecdac8fa5e41bb1",
    "logs": [],
    "blockNumber": 7409045,
    "cumulativeGasUsed": "5166326",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f05cf010590fa3af9d6e015b92bdb3d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MAX_HOURS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_HOURS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"numberOfShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_disputeAdmin\",\"type\":\"address\"}],\"name\":\"createContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freelancers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"stakingContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFreelancerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ContractFactory.sol\":\"ContractFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ContractFactory.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./StakingContract.sol\\\";\\n\\ncontract ContractFactory {\\n\\tuint256 public constant MIN_HOURS = 24 ether;\\n\\tuint256 public constant MAX_HOURS = 720 ether;\\n\\n\\tstruct FreelancerInfo {\\n\\t\\tuint256 id;\\n\\t\\tstring name;\\n\\t\\tstring description;\\n\\t\\taddress stakingContractAddress;\\n\\t\\taddress owner;\\n\\t}\\n\\n\\tuint256 public idCounter;\\n\\tFreelancerInfo[] public freelancers;\\n\\n\\tfunction createContract(\\n\\t\\tstring memory name,\\n\\t\\tstring memory description,\\n\\t\\tstring memory tokenName,\\n\\t\\tstring memory tokenSymbol,\\n\\t\\t// uint256 stakingAmount,\\n\\t\\tuint256 numberOfShares,\\n\\t\\tuint256 stakeAmount,\\n\\t\\taddress _disputeAdmin\\n\\t) public payable {\\n\\t\\trequire(msg.value == stakeAmount, \\\"Insufficient Stake Amount\\\");\\n\\t\\trequire(\\n\\t\\t\\tnumberOfShares <= MAX_HOURS && numberOfShares >= MIN_HOURS,\\n\\t\\t\\t\\\"Invalid number of shares. Should be within 24 and 720 hours\\\"\\n\\t\\t);\\n\\t\\tuint256 hourlyRate = (stakeAmount * 1 ether) / numberOfShares;\\n\\t\\tStakingContract stakingContract = new StakingContract(\\n\\t\\t\\t_disputeAdmin,\\n\\t\\t\\tnumberOfShares,\\n\\t\\t\\thourlyRate,\\n\\t\\t\\ttokenName,\\n\\t\\t\\ttokenSymbol\\n\\t\\t);\\n\\t\\t// Transfer the stake amount to the staking contract\\n\\n\\t\\t(bool success, ) = payable(address(stakingContract)).call{\\n\\t\\t\\tvalue: msg.value\\n\\t\\t}(\\\"\\\");\\n\\t\\trequire(success, \\\"Stake transfer failed\\\");\\n\\t\\tfreelancers.push(\\n\\t\\t\\tFreelancerInfo(\\n\\t\\t\\t\\tidCounter++,\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tdescription,\\n\\t\\t\\t\\taddress(stakingContract),\\n\\t\\t\\t\\tmsg.sender\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getFreelancerCount() public view returns (uint) {\\n\\t\\treturn freelancers.length;\\n\\t}\\n\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0xb9ddbc99b2280ae3ee8e9b5689c93752fb9dd8492cfdc8cec38a801afca4dea0\",\"license\":\"Unlicense\"},\"contracts/EmployeeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract EmployeeToken is ERC20, Ownable {\\n\\tconstructor(\\n\\t\\taddress initialOwner,\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\tuint256 initialSupply\\n\\t) ERC20(name, symbol) {\\n\\t\\t_mint(initialOwner, initialSupply);\\n\\t}\\n\\n\\tfunction mint(address to, uint256 amount) public onlyOwner {\\n\\t\\t_mint(to, amount);\\n\\t}\\n}\\n\",\"keccak256\":\"0xc9469052546187cca3833e96f6544910db85d0e4c805fd1fd757b390392ec0a3\",\"license\":\"MIT\"},\"contracts/StakingContract.sol\":{\"content\":\"//SPDX-License-Identifier: Unlic ense\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./EmployeeToken.sol\\\";\\n\\ncontract StakingContract is Ownable {\\n\\t/// @dev Validation period for the client to confirm the work delivered by the freelancer\\n\\tuint256 public constant VALIDATION_PERIOD = 3 days;\\n\\t/// @dev Buffer period for the freelancer to deliver the work. Adds to the deadline\\n\\tuint256 public constant BUFFER_PERIOD = 1 days;\\n\\n\\tuint256 public hourlyRate;\\n\\n\\tuint256 public freelancerStake;\\n\\n\\taddress public disputeAdmin;\\n\\n\\tmapping(address => mapping(address => uint256)) public sharesBalance;\\n\\tmapping(address => uint256) public sharesSupply;\\n\\n\\tevent Trade(\\n\\t\\taddress trader,\\n\\t\\taddress subject,\\n\\t\\tbool isBuy,\\n\\t\\tuint256 shareAmount,\\n\\t\\tuint256 ethAmount,\\n\\t\\tuint256 supply\\n\\t);\\n\\n\\tenum TaskStatus {\\n\\t\\tNOT_STARTED,\\n\\t\\tIN_PROGRESS,\\n\\t\\tCANCELED,\\n\\t\\tWORK_DELIVERED,\\n\\t\\tWORK_VALIDATED,\\n\\t\\tWORK_COMPLETED\\n\\t}\\n\\n\\tstruct Task {\\n\\t\\tuint256 id;\\n\\t\\tuint256 startTime;\\n\\t\\tuint256 duration;\\n\\t\\tuint256 shares;\\n\\t\\tuint256 stakeAmount;\\n\\t\\tTaskStatus status;\\n\\t\\taddress client;\\n\\t}\\n\\n\\tstruct Dispute {\\n\\t\\tuint256 createdAt;\\n\\t\\tbool isResolved;\\n\\t}\\n\\n\\tmodifier taskExists(uint256 taskId) {\\n\\t\\trequire(tasks[taskId].id != 0, \\\"Task does not exist\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmapping(uint256 => Task) public tasks;\\n\\tuint256 public taskCounter;\\n\\tmapping(uint256 => Dispute) public disputes;\\n\\n\\tEmployeeToken public _EmployeeToken;\\n\\taddress public erc20TokenAddress;\\n\\n\\tconstructor(\\n\\t\\taddress _disputeAdmin, // address of the dispute admin\\n\\t\\tuint256 initialSupplyOfShares,\\n\\t\\tuint256 _hourlyRate,\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol\\n\\t) {\\n\\t\\t_transferOwnership(msg.sender);\\n\\t\\tdisputeAdmin = _disputeAdmin;\\n\\t\\t// Calculate t\\n\\t\\t_EmployeeToken = new EmployeeToken(\\n\\t\\t\\taddress(this),\\n\\t\\t\\tname,\\n\\t\\t\\tsymbol,\\n\\t\\t\\tinitialSupplyOfShares\\n\\t\\t);\\n\\t\\terc20TokenAddress = address(_EmployeeToken);\\n\\t\\thourlyRate = _hourlyRate;\\n\\t\\t// Add freelancers stake\\n\\t}\\n\\n\\t/// @dev Function to create task for the freelancer. Client also has to stake some amount of ETH equal to the shares value.\\n\\tfunction createTask(uint256 duration, uint256 _shares) public payable {\\n\\t\\t// Check that frelancer's stake is more or equal to 1 share value\\n\\t\\trequire(\\n\\t\\t\\tfreelancerStake >= 1 ether,\\n\\t\\t\\t\\\"Freelancer's stake is less than 1 share value\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tmsg.value == 1 ether,\\n\\t\\t\\t\\\"Client stake is not equal to the shares value\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_EmployeeToken.balanceOf(msg.sender) >= 1 ether,\\n\\t\\t\\t\\\"Insufficient shares\\\"\\n\\t\\t);\\n\\n\\t\\ttaskCounter++;\\n\\n\\t\\ttasks[taskCounter] = Task({\\n\\t\\t\\tid: taskCounter,\\n\\t\\t\\tstartTime: 0,\\n\\t\\t\\tduration: duration + BUFFER_PERIOD,\\n\\t\\t\\tshares: _shares,\\n\\t\\t\\tstakeAmount: 1 ether,\\n\\t\\t\\tstatus: TaskStatus.NOT_STARTED,\\n\\t\\t\\tclient: msg.sender\\n\\t\\t});\\n\\n\\t\\t// Client transfers the int amount of shares to the contract\\n\\t\\t_EmployeeToken.transferFrom(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\taddress(this),\\n\\t\\t\\ttasks[taskCounter].shares\\n\\t\\t);\\n\\t}\\n\\n\\t/// @dev Function to start the task. Called by the freelancer\\n\\tfunction startTask(uint256 taskId) public taskExists(taskId) onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].status == TaskStatus.NOT_STARTED,\\n\\t\\t\\t\\\"Task already started or canceled\\\"\\n\\t\\t);\\n\\n\\t\\ttasks[taskId].startTime = block.timestamp;\\n\\t\\ttasks[taskId].status = TaskStatus.IN_PROGRESS;\\n\\t}\\n\\n\\tfunction cancelTask(uint256 taskId) public taskExists(taskId) {\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].client == msg.sender,\\n\\t\\t\\t\\\"You are not the client of this task\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].status == TaskStatus.NOT_STARTED,\\n\\t\\t\\t\\\"Task already started\\\"\\n\\t\\t);\\n\\n\\t\\t// Send the client's stake back\\n\\t\\t(bool success, ) = tasks[taskId].client.call{\\n\\t\\t\\tvalue: tasks[taskId].stakeAmount\\n\\t\\t}(\\\"\\\");\\n\\t\\trequire(success, \\\"Failed to send the stake amount to the client\\\");\\n\\n\\t\\t// Release the clien's shares\\n\\t\\t_EmployeeToken.transfer(tasks[taskId].client, tasks[taskId].shares);\\n\\n\\t\\ttasks[taskId].status = TaskStatus.CANCELED;\\n\\t}\\n\\n\\t/// @dev Function to slash the freelancer if they don't deliver the work on time\\n\\tfunction slashFreelancer(uint256 taskId) public taskExists(taskId) {\\n\\t\\t// slash freelancer\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].status == TaskStatus.IN_PROGRESS,\\n\\t\\t\\t\\\"Can't slash freelancer because the task is not in progres\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].startTime + tasks[taskId].duration < block.timestamp,\\n\\t\\t\\t\\\"Task is not late yet\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].client == msg.sender,\\n\\t\\t\\t\\\"You are not the client of this task\\\"\\n\\t\\t);\\n\\n\\t\\t// slash freelancer. Send freelancer's stake to the client\\n\\t\\t(bool success, ) = tasks[taskId].client.call{\\n\\t\\t\\tvalue: 2 * tasks[taskId].stakeAmount\\n\\t\\t}(\\\"\\\");\\n\\t\\trequire(success, \\\"Failed to send the stake amount to the client\\\");\\n\\n\\t\\t// Send locked shares to the client\\n\\t\\t_EmployeeToken.transfer(tasks[taskId].client, tasks[taskId].shares);\\n\\n\\t\\ttasks[taskId].status = TaskStatus.WORK_COMPLETED;\\n\\t}\\n\\n\\t/// @dev Function that freelancer calls when client takes too long to validate the work\\n\\tfunction slashClient(uint256 taskId) public taskExists(taskId) onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].status == TaskStatus.WORK_DELIVERED,\\n\\t\\t\\t\\\"Task is not in the slashed client state\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].startTime +\\n\\t\\t\\t\\ttasks[taskId].duration +\\n\\t\\t\\t\\tVALIDATION_PERIOD <\\n\\t\\t\\t\\tblock.timestamp,\\n\\t\\t\\t\\\"Task validation is not late yet\\\"\\n\\t\\t);\\n\\t\\t// Release the freelancer's payment\\n\\t\\t_EmployeeToken.transfer(owner(), tasks[taskId].shares);\\n\\n\\t\\t// Where should we send the client's stake?\\n\\n\\t\\ttasks[taskId].status = TaskStatus.WORK_COMPLETED;\\n\\t}\\n\\n\\t/// @dev Function that freelancer  calls to confirm that they have delivered the work\\n\\t/// @param taskId The id of the task\\n\\tfunction confirmWorkDeleveredFreelancer(\\n\\t\\tuint256 taskId\\n\\t) public taskExists(taskId) onlyOwner {\\n\\t\\t// confirm work delivered\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].status == TaskStatus.IN_PROGRESS,\\n\\t\\t\\t\\\"Work already delivered\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].startTime + tasks[taskId].duration >= block.timestamp,\\n\\t\\t\\t\\\"Task is overdue\\\"\\n\\t\\t);\\n\\n\\t\\ttasks[taskId].status = TaskStatus.WORK_DELIVERED;\\n\\t}\\n\\n\\t/// @dev Function that client calls to confirm that they have received the work from freelancer\\n\\tfunction confirmWorkCompletedClient(\\n\\t\\tuint256 taskId,\\n\\t\\tbool delivered\\n\\t) public taskExists(taskId) {\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].client == msg.sender,\\n\\t\\t\\t\\\"You are not the client of this task\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].status == TaskStatus.WORK_DELIVERED,\\n\\t\\t\\t\\\"Work not delivered yet\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttasks[taskId].startTime +\\n\\t\\t\\t\\ttasks[taskId].duration +\\n\\t\\t\\t\\tVALIDATION_PERIOD >=\\n\\t\\t\\t\\tblock.timestamp,\\n\\t\\t\\t\\\"Task is overdue for validation\\\"\\n\\t\\t);\\n\\n\\t\\tif (delivered) {\\n\\t\\t\\ttasks[taskId].status = TaskStatus.WORK_COMPLETED;\\n\\t\\t\\t// release the freelancer's payment\\n\\t\\t\\t_EmployeeToken.transfer(owner(), tasks[taskId].shares);\\n\\n\\t\\t\\t(bool success, ) = tasks[taskId].client.call{\\n\\t\\t\\t\\tvalue: tasks[taskId].stakeAmount\\n\\t\\t\\t}(\\\"\\\");\\n\\t\\t\\trequire(success, \\\"Failed to send the stake amount to the client\\\");\\n\\t\\t} else {\\n\\t\\t\\ttasks[taskId].status = TaskStatus.WORK_VALIDATED;\\n\\t\\t\\tcreateDispute(taskId);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction createDispute(uint256 taskId) internal {\\n\\t\\tdisputes[taskId] = Dispute({\\n\\t\\t\\tcreatedAt: block.timestamp,\\n\\t\\t\\tisResolved: false\\n\\t\\t});\\n\\t}\\n\\n\\tfunction resolveDispute(\\n\\t\\tuint256 taskId,\\n\\t\\tbool isClientRight\\n\\t) public taskExists(taskId) {\\n\\t\\trequire(disputes[taskId].isResolved, \\\"Dispute already resolved\\\");\\n\\t\\trequire(msg.sender == disputeAdmin, \\\"You are not the dispute admin\\\");\\n\\n\\t\\tif (isClientRight) {\\n\\t\\t\\t// Slash the freelancer and send the client's stake back\\n\\t\\t\\tfreelancerStake -= tasks[taskId].stakeAmount;\\n\\t\\t\\t(bool success, ) = tasks[taskId].client.call{\\n\\t\\t\\t\\tvalue: 2 * tasks[taskId].stakeAmount\\n\\t\\t\\t}(\\\"\\\");\\n\\t\\t\\trequire(success, \\\"Failed to send the stake amount to the client\\\");\\n\\n\\t\\t\\t// Send locked shares to the client\\n\\t\\t\\t_EmployeeToken.transfer(tasks[taskId].client, tasks[taskId].shares);\\n\\t\\t} else {\\n\\t\\t\\t// Release the freelancer's payment\\n\\t\\t\\t_EmployeeToken.transfer(owner(), tasks[taskId].shares);\\n\\n\\t\\t\\t// Send the client's stake to the freelancer\\n\\t\\t\\t(bool success, ) = owner().call{ value: tasks[taskId].stakeAmount }(\\n\\t\\t\\t\\t\\\"\\\"\\n\\t\\t\\t);\\n\\t\\t\\trequire(success, \\\"Failed to send the stake amount to the client\\\");\\n\\t\\t}\\n\\t\\ttasks[taskId].status = TaskStatus.WORK_COMPLETED;\\n\\t\\tdisputes[taskId].isResolved = true;\\n\\t}\\n\\n\\tfunction getPrice(\\n\\t\\tuint256 supply,\\n\\t\\tuint256 amount\\n\\t) public view returns (uint256) {\\n\\t\\tuint256 sum1 = supply == 0\\n\\t\\t\\t? 0\\n\\t\\t\\t: ((supply - 1) * (supply) * (2 * (supply - 1) + 1)) / 6;\\n\\t\\tuint256 sum2 = supply == 0 && amount == 1\\n\\t\\t\\t? 0\\n\\t\\t\\t: ((supply - 1 + amount) *\\n\\t\\t\\t\\t(supply + amount) *\\n\\t\\t\\t\\t(2 * (supply - 1 + amount) + 1)) / 6;\\n\\t\\tuint256 summation = sum2 - sum1;\\n\\t\\treturn (summation * 1 ether) / hourlyRate;\\n\\t}\\n\\n\\tfunction getBuyPrice(\\n\\t\\taddress sharesSubject,\\n\\t\\tuint256 amount\\n\\t) public view returns (uint256) {\\n\\t\\treturn getPrice(sharesSupply[sharesSubject], amount);\\n\\t}\\n\\n\\tfunction getSellPrice(\\n\\t\\taddress sharesSubject,\\n\\t\\tuint256 amount\\n\\t) public view returns (uint256) {\\n\\t\\treturn getPrice(sharesSupply[sharesSubject] - amount, amount);\\n\\t}\\n\\n\\tfunction buyShares(address sharesSubject, uint256 amount) public payable {\\n\\t\\tuint256 supply = sharesSupply[sharesSubject];\\n\\t\\trequire(\\n\\t\\t\\tsupply > 0 || sharesSubject == msg.sender,\\n\\t\\t\\t\\\"Only the shares' subject can buy the first share\\\"\\n\\t\\t);\\n\\t\\tuint256 price = getPrice(supply, amount);\\n\\t\\trequire(msg.value >= price, \\\"Insufficient payment\\\");\\n\\t\\tsharesBalance[sharesSubject][msg.sender] =\\n\\t\\t\\tsharesBalance[sharesSubject][msg.sender] +\\n\\t\\t\\tamount;\\n\\t\\tsharesSupply[sharesSubject] = supply + amount;\\n\\t\\temit Trade(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tsharesSubject,\\n\\t\\t\\ttrue,\\n\\t\\t\\tamount,\\n\\t\\t\\tprice,\\n\\t\\t\\tsupply + amount\\n\\t\\t);\\n\\t\\t_EmployeeToken.transfer(msg.sender, amount);\\n\\t}\\n\\n\\tfunction sellShares(address sharesSubject, uint256 amount) public payable {\\n\\t\\tuint256 supply = sharesSupply[sharesSubject];\\n\\t\\trequire(supply > amount, \\\"Cannot sell the last share\\\");\\n\\t\\tuint256 price = getPrice(supply - amount, amount);\\n\\t\\trequire(\\n\\t\\t\\tsharesBalance[sharesSubject][msg.sender] >= amount,\\n\\t\\t\\t\\\"Insufficient shares\\\"\\n\\t\\t);\\n\\t\\tsharesBalance[sharesSubject][msg.sender] =\\n\\t\\t\\tsharesBalance[sharesSubject][msg.sender] -\\n\\t\\t\\tamount;\\n\\t\\tsharesSupply[sharesSubject] = supply - amount;\\n\\t\\temit Trade(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tsharesSubject,\\n\\t\\t\\tfalse,\\n\\t\\t\\tamount,\\n\\t\\t\\tprice,\\n\\t\\t\\tsupply - amount\\n\\t\\t);\\n\\t\\t(bool sent, ) = payable(msg.sender).call{ value: price }(\\\"\\\");\\n\\t\\t_EmployeeToken.transferFrom(msg.sender, address(this), amount);\\n\\t\\trequire(sent, \\\"Failed to send Ether\\\");\\n\\t}\\n\\n\\tfunction getSomeShares(uint256 amount) public {\\n\\t\\t_EmployeeToken.transfer(msg.sender, amount);\\n\\t}\\n\\n\\treceive() external payable {\\n\\t\\tif (msg.sender == owner()) {\\n\\t\\t\\tfreelancerStake += msg.value;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xba2265d9d59f3e5a11ec85c9dcb893b73626f18be3dcd58fb9c86a1c7deb21a9\",\"license\":\"Unlic ense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614189806100206000396000f3fe608060405260043610620000605760003560e01c806304debb5f146200006d5780630b9364d8146200008657806320be553814620000c75780634a623b4814620000f55780635d341543146200010c578063eb08ab28146200012b57600080fd5b366200006857005b600080fd5b620000846200007e36600462000661565b62000143565b005b3480156200009357600080fd5b50620000ab620000a536600462000741565b6200041b565b604051620000be959493929190620007a3565b60405180910390f35b348015620000d457600080fd5b50620000e668014d1120d7b160000081565b604051908152602001620000be565b3480156200010257600080fd5b50600154620000e6565b3480156200011957600080fd5b50620000e668270801d946c940000081565b3480156200013857600080fd5b50620000e660005481565b813414620001985760405162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e74205374616b6520416d6f756e740000000000000060448201526064015b60405180910390fd5b68270801d946c94000008311158015620001bb575068014d1120d7b16000008310155b6200022f5760405162461bcd60e51b815260206004820152603b60248201527f496e76616c6964206e756d626572206f66207368617265732e2053686f756c6460448201527f2062652077697468696e20323420616e642037323020686f757273000000000060648201526084016200018f565b6000836200024684670de0b6b3a76400006200080e565b6200025291906200082e565b90506000828583898960405162000269906200058b565b6200027995949392919062000851565b604051809103906000f08015801562000296573d6000803e3d6000fd5b5090506000816001600160a01b03163460405160006040518083038185875af1925050503d8060008114620002e8576040519150601f19603f3d011682016040523d82523d6000602084013e620002ed565b606091505b5050905080620003385760405162461bcd60e51b815260206004820152601560248201527414dd185ad9481d1c985b9cd9995c8819985a5b1959605a1b60448201526064016200018f565b60016040518060a001604052806000808154809291906200035990620008a0565b90915550815260208082018e9052604082018d90526001600160a01b0386166060830152336080909201919091528254600181810185556000948552938290208351600590920201908155908201519192909190820190620003bc90826200094b565b5060408201516002820190620003d390826200094b565b5060608201516003820180546001600160a01b03199081166001600160a01b039384161790915560809093015160049092018054909316911617905550505050505050505050565b600181815481106200042c57600080fd5b600091825260209091206005909102018054600182018054919350906200045390620008bc565b80601f01602080910402602001604051908101604052809291908181526020018280546200048190620008bc565b8015620004d25780601f10620004a657610100808354040283529160200191620004d2565b820191906000526020600020905b815481529060010190602001808311620004b457829003601f168201915b505050505090806002018054620004e990620008bc565b80601f01602080910402602001604051908101604052809291908181526020018280546200051790620008bc565b8015620005685780601f106200053c5761010080835404028352916020019162000568565b820191906000526020600020905b8154815290600101906020018083116200054a57829003601f168201915b50505050600383015460049093015491926001600160a01b039081169216905085565b61373b8062000a1983390190565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620005c157600080fd5b813567ffffffffffffffff80821115620005df57620005df62000599565b604051601f8301601f19908116603f011681019082821181831017156200060a576200060a62000599565b816040528381528660208588010111156200062457600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b03811681146200065c57600080fd5b919050565b600080600080600080600060e0888a0312156200067d57600080fd5b873567ffffffffffffffff808211156200069657600080fd5b620006a48b838c01620005af565b985060208a0135915080821115620006bb57600080fd5b620006c98b838c01620005af565b975060408a0135915080821115620006e057600080fd5b620006ee8b838c01620005af565b965060608a01359150808211156200070557600080fd5b50620007148a828b01620005af565b9450506080880135925060a088013591506200073360c0890162000644565b905092959891949750929550565b6000602082840312156200075457600080fd5b5035919050565b6000815180845260005b81811015620007835760208185018101518683018201520162000765565b506000602082860101526020601f19601f83011685010191505092915050565b85815260a060208201526000620007be60a08301876200075b565b8281036040840152620007d281876200075b565b6001600160a01b0395861660608501529390941660809092019190915250949350505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620008285762000828620007f8565b92915050565b6000826200084c57634e487b7160e01b600052601260045260246000fd5b500490565b60018060a01b038616815284602082015283604082015260a0606082015260006200088060a08301856200075b565b82810360808401526200089481856200075b565b98975050505050505050565b600060018201620008b557620008b5620007f8565b5060010190565b600181811c90821680620008d157607f821691505b602082108103620008f257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200094657600081815260208120601f850160051c81016020861015620009215750805b601f850160051c820191505b8181101562000942578281556001016200092d565b5050505b505050565b815167ffffffffffffffff81111562000968576200096862000599565b6200098081620009798454620008bc565b84620008f8565b602080601f831160018114620009b857600084156200099f5750858301515b600019600386901b1c1916600185901b17855562000942565b600085815260208120601f198616915b82811015620009e957888601518255948401946001909101908401620009c8565b508582101562000a085787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fe60806040523480156200001157600080fd5b506040516200373b3803806200373b83398101604081905262000034916200020c565b6200003f33620000e1565b6200004a33620000e1565b600380546001600160a01b0319166001600160a01b03871617905560405130908390839087906200007b9062000131565b6200008a9493929190620002d9565b604051809103906000f080158015620000a7573d6000803e3d6000fd5b50600980546001600160a01b03929092166001600160a01b03199283168117909155600a8054909216179055505060015550620003259050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610f8780620027b483390190565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200017257818101518382015260200162000158565b50506000910152565b600082601f8301126200018d57600080fd5b81516001600160401b0380821115620001aa57620001aa6200013f565b604051601f8301601f19908116603f01168101908282118183101715620001d557620001d56200013f565b81604052838152866020858801011115620001ef57600080fd5b6200020284602083016020890162000155565b9695505050505050565b600080600080600060a086880312156200022557600080fd5b85516001600160a01b03811681146200023d57600080fd5b60208701516040880151606089015192975090955093506001600160401b03808211156200026a57600080fd5b6200027889838a016200017b565b935060808801519150808211156200028f57600080fd5b506200029e888289016200017b565b9150509295509295909350565b60008151808452620002c581602086016020860162000155565b601f01601f19169290920160200192915050565b6001600160a01b0385168152608060208201819052600090620002ff90830186620002ab565b8281036040840152620003138186620002ab565b91505082606083015295945050505050565b61247f80620003356000396000f3fe6080604052600436106101c65760003560e01c80637eec20a8116100f7578063d77a916c11610095578063f2fde38b11610064578063f2fde38b14610586578063f835cd3c146105a6578063f9931be0146105c6578063fe9efcaf146105f357600080fd5b8063d77a916c14610513578063ded98a2914610533578063e75b237814610553578063f0ad56201461056657600080fd5b80639ae71781116100d15780639ae71781146104b3578063b51d0534146104d3578063b65b29cf146104e6578063bc6a48aa146104fd57600080fd5b80637eec20a8146103ff5780638d9776721461041f5780638da5cb5b1461049557600080fd5b8063564a565d116101645780635cf4ee911161013e5780635cf4ee91146103975780635f944326146103b75780636945b123146103d7578063715018a6146103ea57600080fd5b8063564a565d1461031f578063586717301461036b57806359a7b3fe1461038157600080fd5b80633326de98116101a05780633326de981461029f57806334b25ee2146102bf5780634066fae0146102df5780634635256e146102ff57600080fd5b8063020235ff146101fc5780630b4ea64414610247578063202a884e1461027f57600080fd5b366101f7576000546001600160a01b031633036101f55734600260008282546101ef9190612150565b90915550505b005b600080fd5b34801561020857600080fd5b5061023461021736600461217f565b600460209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b34801561025357600080fd5b50600954610267906001600160a01b031681565b6040516001600160a01b03909116815260200161023e565b34801561028b57600080fd5b506101f561029a3660046121b2565b61060a565b3480156102ab57600080fd5b506101f56102ba3660046121b2565b6108d8565b3480156102cb57600080fd5b506101f56102da3660046121d9565b610a09565b3480156102eb57600080fd5b506101f56102fa3660046121b2565b610dbb565b34801561030b57600080fd5b5061023461031a366004612209565b610e34565b34801561032b57600080fd5b5061035661033a3660046121b2565b6008602052600090815260409020805460019091015460ff1682565b6040805192835290151560208301520161023e565b34801561037757600080fd5b5061023460075481565b34801561038d57600080fd5b5061023460015481565b3480156103a357600080fd5b506102346103b2366004612233565b610e60565b3480156103c357600080fd5b506101f56103d23660046121b2565b610f82565b6101f56103e5366004612209565b611056565b3480156103f657600080fd5b506101f56112a0565b34801561040b57600080fd5b506101f561041a3660046121b2565b6112b4565b34801561042b57600080fd5b5061048261043a3660046121b2565b600660205260009081526040902080546001820154600283015460038401546004850154600590950154939492939192909160ff81169061010090046001600160a01b031687565b60405161023e979695949392919061226b565b3480156104a157600080fd5b506000546001600160a01b0316610267565b3480156104bf57600080fd5b506102346104ce366004612209565b6114d6565b6101f56104e1366004612209565b611504565b3480156104f257600080fd5b506102346201518081565b34801561050957600080fd5b5061023460025481565b34801561051f57600080fd5b50600354610267906001600160a01b031681565b34801561053f57600080fd5b506101f561054e3660046121d9565b6117e0565b6101f5610561366004612233565b611aff565b34801561057257600080fd5b506101f56105813660046121b2565b611e13565b34801561059257600080fd5b506101f56105a13660046122cf565b612017565b3480156105b257600080fd5b50600a54610267906001600160a01b031681565b3480156105d257600080fd5b506102346105e13660046122cf565b60056020526000908152604090205481565b3480156105ff57600080fd5b506102346203f48081565b6000818152600660205260408120548291036106415760405162461bcd60e51b8152600401610638906122ea565b60405180910390fd5b6001600083815260066020526040902060059081015460ff169081111561066a5761066a612255565b146106dd5760405162461bcd60e51b815260206004820152603960248201527f43616e277420736c61736820667265656c616e6365722062656361757365207460448201527f6865207461736b206973206e6f7420696e2070726f67726573000000000000006064820152608401610638565b60008281526006602052604090206002810154600190910154429161070191612150565b106107455760405162461bcd60e51b815260206004820152601460248201527315185cdac81a5cc81b9bdd081b185d19481e595d60621b6044820152606401610638565b60008281526006602052604090206005015461010090046001600160a01b031633146107835760405162461bcd60e51b815260040161063890612317565b600082815260066020526040812060058101546004909101546101009091046001600160a01b0316906107b790600261235a565b604051600081818185875af1925050503d80600081146107f3576040519150601f19603f3d011682016040523d82523d6000602084013e6107f8565b606091505b50509050806108195760405162461bcd60e51b815260040161063890612371565b600954600084815260066020526040908190206005810154600390910154915163a9059cbb60e01b81526101009091046001600160a01b039081166004830152602482019290925291169063a9059cbb906044016020604051808303816000875af115801561088c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b091906123be565b5060008381526006602052604090206005908101805460ff19166001835b0217905550505050565b6000818152600660205260408120548291036109065760405162461bcd60e51b8152600401610638906122ea565b61090e612090565b6001600083815260066020526040902060059081015460ff169081111561093757610937612255565b1461097d5760405162461bcd60e51b815260206004820152601660248201527515dbdc9ac8185b1c9958591e4819195b1a5d995c995960521b6044820152606401610638565b6000828152600660205260409020600281015460019091015442916109a191612150565b10156109e15760405162461bcd60e51b815260206004820152600f60248201526e5461736b206973206f76657264756560881b6044820152606401610638565b600082815260066020526040902060050180546003919060ff19166001835b02179055505050565b600082815260066020526040812054839103610a375760405162461bcd60e51b8152600401610638906122ea565b60008381526008602052604090206001015460ff16610a985760405162461bcd60e51b815260206004820152601860248201527f4469737075746520616c7265616479207265736f6c76656400000000000000006044820152606401610638565b6003546001600160a01b03163314610af25760405162461bcd60e51b815260206004820152601d60248201527f596f7520617265206e6f742074686520646973707574652061646d696e0000006044820152606401610638565b8115610c56576000838152600660205260408120600401546002805491929091610b1d9084906123e2565b9091555050600083815260066020526040812060058101546004909101546101009091046001600160a01b031690610b5690600261235a565b604051600081818185875af1925050503d8060008114610b92576040519150601f19603f3d011682016040523d82523d6000602084013e610b97565b606091505b5050905080610bb85760405162461bcd60e51b815260040161063890612371565b600954600085815260066020526040908190206005810154600390910154915163a9059cbb60e01b81526101009091046001600160a01b039081166004830152602482019290925291169063a9059cbb906044016020604051808303816000875af1158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f91906123be565b5050610d7f565b6009546001600160a01b031663a9059cbb610c796000546001600160a01b031690565b6000868152600660205260409081902060030154905160e084901b6001600160e01b03191681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfb91906123be565b5060008054848252600660205260408083206004015490516001600160a01b03909216918381818185875af1925050503d8060008114610d57576040519150601f19603f3d011682016040523d82523d6000602084013e610d5c565b606091505b5050905080610d7d5760405162461bcd60e51b815260040161063890612371565b505b505060009081526006602090815260408083206005908101805460ff199081169092179055600890925290912060019081018054909216179055565b60095460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3091906123be565b5050565b6001600160a01b038216600090815260056020526040812054610e579083610e60565b90505b92915050565b6000808315610ebb576006610e766001866123e2565b610e8190600261235a565b610e8c906001612150565b85610e986001826123e2565b610ea2919061235a565b610eac919061235a565b610eb691906123f5565b610ebe565b60005b9050600084158015610ed05750836001145b610f4557600684610ee26001886123e2565b610eec9190612150565b610ef790600261235a565b610f02906001612150565b610f0c8688612150565b86610f1860018a6123e2565b610f229190612150565b610f2c919061235a565b610f36919061235a565b610f4091906123f5565b610f48565b60005b90506000610f5683836123e2565b600154909150610f6e82670de0b6b3a764000061235a565b610f7891906123f5565b9695505050505050565b600081815260066020526040812054829103610fb05760405162461bcd60e51b8152600401610638906122ea565b610fb8612090565b600082815260066020526040812060059081015460ff1690811115610fdf57610fdf612255565b1461102c5760405162461bcd60e51b815260206004820181905260248201527f5461736b20616c72656164792073746172746564206f722063616e63656c65646044820152606401610638565b6000828152600660205260409020426001808301919091556005909101805460ff19168280610a00565b6001600160a01b0382166000908152600560205260409020548015158061108557506001600160a01b03831633145b6110ea5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652073686172657327207375626a6563742063616e2062757960448201526f2074686520666972737420736861726560801b6064820152608401610638565b60006110f68284610e60565b90508034101561113f5760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606401610638565b6001600160a01b038416600090815260046020908152604080832033845290915290205461116e908490612150565b6001600160a01b038516600090815260046020908152604080832033845290915290205561119c8383612150565b6001600160a01b0385166000908152600560205260409020557ff7dd8a134438de4c59401760e24ef5c6cc9c74583b2b022085697f3021e597683385600186856111e68289612150565b604080516001600160a01b039788168152959096166020860152921515848601526060840191909152608083015260a082015290519081900360c00190a160095460405163a9059cbb60e01b8152336004820152602481018590526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611275573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129991906123be565b5050505050565b6112a8612090565b6112b260006120ea565b565b6000818152600660205260408120548291036112e25760405162461bcd60e51b8152600401610638906122ea565b60008281526006602052604090206005015461010090046001600160a01b031633146113205760405162461bcd60e51b815260040161063890612317565b600082815260066020526040812060059081015460ff169081111561134757611347612255565b1461138b5760405162461bcd60e51b815260206004820152601460248201527315185cdac8185b1c9958591e481cdd185c9d195960621b6044820152606401610638565b600082815260066020526040808220600581015460049091015491516101009091046001600160a01b0316919060006040518083038185875af1925050503d80600081146113f5576040519150601f19603f3d011682016040523d82523d6000602084013e6113fa565b606091505b505090508061141b5760405162461bcd60e51b815260040161063890612371565b600954600084815260066020526040908190206005810154600390910154915163a9059cbb60e01b81526101009091046001600160a01b039081166004830152602482019290925291169063a9059cbb906044016020604051808303816000875af115801561148e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b291906123be565b50600083815260066020526040902060050180546002919060ff19166001836108ce565b6001600160a01b038216600090815260056020526040812054610e57906114fe9084906123e2565b83610e60565b6001600160a01b03821660009081526005602052604090205481811161156c5760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742073656c6c20746865206c6173742073686172650000000000006044820152606401610638565b600061158161157b84846123e2565b84610e60565b6001600160a01b03851660009081526004602090815260408083203384529091529020549091508311156115ed5760405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e742073686172657360681b6044820152606401610638565b6001600160a01b038416600090815260046020908152604080832033845290915290205461161c9084906123e2565b6001600160a01b038516600090815260046020908152604080832033845290915290205561164a83836123e2565b6001600160a01b0385166000908152600560205260408120919091557ff7dd8a134438de4c59401760e24ef5c6cc9c74583b2b022085697f3021e597689033908690868561169882896123e2565b604080516001600160a01b039788168152959096166020860152921515848601526060840191909152608083015260a082015290519081900360c00190a1604051600090339083908381818185875af1925050503d8060008114611718576040519150601f19603f3d011682016040523d82523d6000602084013e61171d565b606091505b50506009546040516323b872dd60e01b8152336004820152306024820152604481018790529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179b91906123be565b50806112995760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610638565b60008281526006602052604081205483910361180e5760405162461bcd60e51b8152600401610638906122ea565b60008381526006602052604090206005015461010090046001600160a01b0316331461184c5760405162461bcd60e51b815260040161063890612317565b6003600084815260066020526040902060059081015460ff169081111561187557611875612255565b146118bb5760405162461bcd60e51b815260206004820152601660248201527515dbdc9ac81b9bdd0819195b1a5d995c9959081e595d60521b6044820152606401610638565b6000838152600660205260409020600281015460019091015442916203f480916118e59190612150565b6118ef9190612150565b101561193d5760405162461bcd60e51b815260206004820152601e60248201527f5461736b206973206f76657264756520666f722076616c69646174696f6e00006044820152606401610638565b8115611aa05760008381526006602052604090206005908101805460ff191660018302179055506009546001600160a01b031663a9059cbb6119876000546001600160a01b031690565b6000868152600660205260409081902060030154905160e084901b6001600160e01b03191681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156119e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0991906123be565b50600083815260066020526040808220600581015460049091015491516101009091046001600160a01b0316919060006040518083038185875af1925050503d8060008114611a74576040519150601f19603f3d011682016040523d82523d6000602084013e611a79565b606091505b5050905080611a9a5760405162461bcd60e51b815260040161063890612371565b50505050565b505060008181526006602090815260408083206005018054600460ff199182161790915581518083018352428152808401858152958552600890935292209051815591516001929092018054909116911515919091179055565b505050565b670de0b6b3a76400006002541015611b6f5760405162461bcd60e51b815260206004820152602d60248201527f467265656c616e6365722773207374616b65206973206c657373207468616e2060448201526c312073686172652076616c756560981b6064820152608401610638565b34670de0b6b3a764000014611bdc5760405162461bcd60e51b815260206004820152602d60248201527f436c69656e74207374616b65206973206e6f7420657175616c20746f2074686560448201526c207368617265732076616c756560981b6064820152608401610638565b6009546040516370a0823160e01b8152336004820152670de0b6b3a7640000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c509190612417565b1015611c945760405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e742073686172657360681b6044820152606401610638565b60078054906000611ca483612430565b90915550506040805160e081018252600754815260006020820152908101611ccf6201518085612150565b815260208101839052670de0b6b3a7640000604082015260600160008152336020918201526007546000908152600682526040908190208351815591830151600180840191909155908301516002830155606083015160038301556080830151600483015560a0830151600580840180549293909260ff1916918490811115611d5a57611d5a612255565b021790555060c0919091015160059091018054610100600160a81b0319166101006001600160a01b0393841602179055600954600754600090815260066020526040908190206003015490516323b872dd60e01b815233600482015230602482015260448101919091529116906323b872dd906064016020604051808303816000875af1158015611def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afa91906123be565b600081815260066020526040812054829103611e415760405162461bcd60e51b8152600401610638906122ea565b611e49612090565b6003600083815260066020526040902060059081015460ff1690811115611e7257611e72612255565b14611ecf5760405162461bcd60e51b815260206004820152602760248201527f5461736b206973206e6f7420696e2074686520736c617368656420636c69656e6044820152667420737461746560c81b6064820152608401610638565b6000828152600660205260409020600281015460019091015442916203f48091611ef99190612150565b611f039190612150565b10611f505760405162461bcd60e51b815260206004820152601f60248201527f5461736b2076616c69646174696f6e206973206e6f74206c61746520796574006044820152606401610638565b6009546001600160a01b031663a9059cbb611f736000546001600160a01b031690565b6000858152600660205260409081902060030154905160e084901b6001600160e01b03191681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff591906123be565b5060008281526006602052604090206005908101805460ff1916600183610a00565b61201f612090565b6001600160a01b0381166120845760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610638565b61208d816120ea565b50565b6000546001600160a01b031633146112b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610638565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610e5a57610e5a61213a565b80356001600160a01b038116811461217a57600080fd5b919050565b6000806040838503121561219257600080fd5b61219b83612163565b91506121a960208401612163565b90509250929050565b6000602082840312156121c457600080fd5b5035919050565b801515811461208d57600080fd5b600080604083850312156121ec57600080fd5b8235915060208301356121fe816121cb565b809150509250929050565b6000806040838503121561221c57600080fd5b61222583612163565b946020939093013593505050565b6000806040838503121561224657600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b600060e082019050888252876020830152866040830152856060830152846080830152600684106122ac57634e487b7160e01b600052602160045260246000fd5b60a08201939093526001600160a01b039190911660c09091015295945050505050565b6000602082840312156122e157600080fd5b610e5782612163565b60208082526013908201527215185cdac8191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b60208082526023908201527f596f7520617265206e6f742074686520636c69656e74206f662074686973207460408201526261736b60e81b606082015260800190565b8082028115828204841417610e5a57610e5a61213a565b6020808252602d908201527f4661696c656420746f2073656e6420746865207374616b6520616d6f756e742060408201526c1d1bc81d1a194818db1a595b9d609a1b606082015260800190565b6000602082840312156123d057600080fd5b81516123db816121cb565b9392505050565b81810381811115610e5a57610e5a61213a565b60008261241257634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561242957600080fd5b5051919050565b6000600182016124425761244261213a565b506001019056fea2646970667358221220289b712b09a268b540a0ff5c4950d476e0da925eb82e7f421734412ae64a383564736f6c6343000814003360806040523480156200001157600080fd5b5060405162000f8738038062000f8783398101604081905262000034916200026c565b828260036200004483826200038c565b5060046200005382826200038c565b505050620000706200006a6200008660201b60201c565b6200008a565b6200007c8482620000dc565b5050505062000480565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216620001375760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b80600260008282546200014b919062000458565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001cf57600080fd5b81516001600160401b0380821115620001ec57620001ec620001a7565b604051601f8301601f19908116603f01168101908282118183101715620002175762000217620001a7565b816040528381526020925086838588010111156200023457600080fd5b600091505b8382101562000258578582018301518183018401529082019062000239565b600093810190920192909252949350505050565b600080600080608085870312156200028357600080fd5b84516001600160a01b03811681146200029b57600080fd5b60208601519094506001600160401b0380821115620002b957600080fd5b620002c788838901620001bd565b94506040870151915080821115620002de57600080fd5b50620002ed87828801620001bd565b606096909601519497939650505050565b600181811c908216806200031357607f821691505b6020821081036200033457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001a257600081815260208120601f850160051c81016020861015620003635750805b601f850160051c820191505b8181101562000384578281556001016200036f565b505050505050565b81516001600160401b03811115620003a857620003a8620001a7565b620003c081620003b98454620002fe565b846200033a565b602080601f831160018114620003f85760008415620003df5750858301515b600019600386901b1c1916600185901b17855562000384565b600085815260208120601f198616915b82811015620004295788860151825594840194600190910190840162000408565b5085821015620004485787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200047a57634e487b7160e01b600052601160045260246000fd5b92915050565b610af780620004906000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d7146101eb578063a9059cbb146101fe578063dd62ed3e14610211578063f2fde38b1461022457600080fd5b806370a0823114610197578063715018a6146101c05780638da5cb5b146101c857806395d89b41146101e357600080fd5b806323b872dd116100d357806323b872dd1461014d578063313ce56714610160578063395093511461016f57806340c10f191461018257600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b610102610237565b60405161010f9190610941565b60405180910390f35b61012b6101263660046109ab565b6102c9565b604051901515815260200161010f565b6002545b60405190815260200161010f565b61012b61015b3660046109d5565b6102e3565b6040516012815260200161010f565b61012b61017d3660046109ab565b610307565b6101956101903660046109ab565b610329565b005b61013f6101a5366004610a11565b6001600160a01b031660009081526020819052604090205490565b61019561033f565b6005546040516001600160a01b03909116815260200161010f565b610102610353565b61012b6101f93660046109ab565b610362565b61012b61020c3660046109ab565b6103e2565b61013f61021f366004610a33565b6103f0565b610195610232366004610a11565b61041b565b60606003805461024690610a66565b80601f016020809104026020016040519081016040528092919081815260200182805461027290610a66565b80156102bf5780601f10610294576101008083540402835291602001916102bf565b820191906000526020600020905b8154815290600101906020018083116102a257829003601f168201915b5050505050905090565b6000336102d7818585610494565b60019150505b92915050565b6000336102f18582856105b8565b6102fc858585610632565b506001949350505050565b6000336102d781858561031a83836103f0565b6103249190610aa0565b610494565b6103316107d6565b61033b8282610830565b5050565b6103476107d6565b61035160006108ef565b565b60606004805461024690610a66565b6000338161037082866103f0565b9050838110156103d55760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102fc8286868403610494565b6000336102d7818585610632565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6104236107d6565b6001600160a01b0381166104885760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103cc565b610491816108ef565b50565b6001600160a01b0383166104f65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103cc565b6001600160a01b0382166105575760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103cc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006105c484846103f0565b9050600019811461062c578181101561061f5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103cc565b61062c8484848403610494565b50505050565b6001600160a01b0383166106965760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103cc565b6001600160a01b0382166106f85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103cc565b6001600160a01b038316600090815260208190526040902054818110156107705760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103cc565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361062c565b6005546001600160a01b031633146103515760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103cc565b6001600160a01b0382166108865760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103cc565b80600260008282546108989190610aa0565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208083528351808285015260005b8181101561096e57858101830151858201604001528201610952565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146109a657600080fd5b919050565b600080604083850312156109be57600080fd5b6109c78361098f565b946020939093013593505050565b6000806000606084860312156109ea57600080fd5b6109f38461098f565b9250610a016020850161098f565b9150604084013590509250925092565b600060208284031215610a2357600080fd5b610a2c8261098f565b9392505050565b60008060408385031215610a4657600080fd5b610a4f8361098f565b9150610a5d6020840161098f565b90509250929050565b600181811c90821680610a7a57607f821691505b602082108103610a9a57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102dd57634e487b7160e01b600052601160045260246000fdfea2646970667358221220f8855897da80d1e84b2f02d265a9c0415e19ebf1c6e7ef53cf0043a09c137b8f64736f6c63430008140033a2646970667358221220d3d237d6316c68cafef31e56dc59b4bee9c4e342d9cd912007163db14b168efe64736f6c63430008140033",
  "deployedBytecode": "0x608060405260043610620000605760003560e01c806304debb5f146200006d5780630b9364d8146200008657806320be553814620000c75780634a623b4814620000f55780635d341543146200010c578063eb08ab28146200012b57600080fd5b366200006857005b600080fd5b620000846200007e36600462000661565b62000143565b005b3480156200009357600080fd5b50620000ab620000a536600462000741565b6200041b565b604051620000be959493929190620007a3565b60405180910390f35b348015620000d457600080fd5b50620000e668014d1120d7b160000081565b604051908152602001620000be565b3480156200010257600080fd5b50600154620000e6565b3480156200011957600080fd5b50620000e668270801d946c940000081565b3480156200013857600080fd5b50620000e660005481565b813414620001985760405162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e74205374616b6520416d6f756e740000000000000060448201526064015b60405180910390fd5b68270801d946c94000008311158015620001bb575068014d1120d7b16000008310155b6200022f5760405162461bcd60e51b815260206004820152603b60248201527f496e76616c6964206e756d626572206f66207368617265732e2053686f756c6460448201527f2062652077697468696e20323420616e642037323020686f757273000000000060648201526084016200018f565b6000836200024684670de0b6b3a76400006200080e565b6200025291906200082e565b90506000828583898960405162000269906200058b565b6200027995949392919062000851565b604051809103906000f08015801562000296573d6000803e3d6000fd5b5090506000816001600160a01b03163460405160006040518083038185875af1925050503d8060008114620002e8576040519150601f19603f3d011682016040523d82523d6000602084013e620002ed565b606091505b5050905080620003385760405162461bcd60e51b815260206004820152601560248201527414dd185ad9481d1c985b9cd9995c8819985a5b1959605a1b60448201526064016200018f565b60016040518060a001604052806000808154809291906200035990620008a0565b90915550815260208082018e9052604082018d90526001600160a01b0386166060830152336080909201919091528254600181810185556000948552938290208351600590920201908155908201519192909190820190620003bc90826200094b565b5060408201516002820190620003d390826200094b565b5060608201516003820180546001600160a01b03199081166001600160a01b039384161790915560809093015160049092018054909316911617905550505050505050505050565b600181815481106200042c57600080fd5b600091825260209091206005909102018054600182018054919350906200045390620008bc565b80601f01602080910402602001604051908101604052809291908181526020018280546200048190620008bc565b8015620004d25780601f10620004a657610100808354040283529160200191620004d2565b820191906000526020600020905b815481529060010190602001808311620004b457829003601f168201915b505050505090806002018054620004e990620008bc565b80601f01602080910402602001604051908101604052809291908181526020018280546200051790620008bc565b8015620005685780601f106200053c5761010080835404028352916020019162000568565b820191906000526020600020905b8154815290600101906020018083116200054a57829003601f168201915b50505050600383015460049093015491926001600160a01b039081169216905085565b61373b8062000a1983390190565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620005c157600080fd5b813567ffffffffffffffff80821115620005df57620005df62000599565b604051601f8301601f19908116603f011681019082821181831017156200060a576200060a62000599565b816040528381528660208588010111156200062457600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b03811681146200065c57600080fd5b919050565b600080600080600080600060e0888a0312156200067d57600080fd5b873567ffffffffffffffff808211156200069657600080fd5b620006a48b838c01620005af565b985060208a0135915080821115620006bb57600080fd5b620006c98b838c01620005af565b975060408a0135915080821115620006e057600080fd5b620006ee8b838c01620005af565b965060608a01359150808211156200070557600080fd5b50620007148a828b01620005af565b9450506080880135925060a088013591506200073360c0890162000644565b905092959891949750929550565b6000602082840312156200075457600080fd5b5035919050565b6000815180845260005b81811015620007835760208185018101518683018201520162000765565b506000602082860101526020601f19601f83011685010191505092915050565b85815260a060208201526000620007be60a08301876200075b565b8281036040840152620007d281876200075b565b6001600160a01b0395861660608501529390941660809092019190915250949350505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620008285762000828620007f8565b92915050565b6000826200084c57634e487b7160e01b600052601260045260246000fd5b500490565b60018060a01b038616815284602082015283604082015260a0606082015260006200088060a08301856200075b565b82810360808401526200089481856200075b565b98975050505050505050565b600060018201620008b557620008b5620007f8565b5060010190565b600181811c90821680620008d157607f821691505b602082108103620008f257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200094657600081815260208120601f850160051c81016020861015620009215750805b601f850160051c820191505b8181101562000942578281556001016200092d565b5050505b505050565b815167ffffffffffffffff81111562000968576200096862000599565b6200098081620009798454620008bc565b84620008f8565b602080601f831160018114620009b857600084156200099f5750858301515b600019600386901b1c1916600185901b17855562000942565b600085815260208120601f198616915b82811015620009e957888601518255948401946001909101908401620009c8565b508582101562000a085787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fe60806040523480156200001157600080fd5b506040516200373b3803806200373b83398101604081905262000034916200020c565b6200003f33620000e1565b6200004a33620000e1565b600380546001600160a01b0319166001600160a01b03871617905560405130908390839087906200007b9062000131565b6200008a9493929190620002d9565b604051809103906000f080158015620000a7573d6000803e3d6000fd5b50600980546001600160a01b03929092166001600160a01b03199283168117909155600a8054909216179055505060015550620003259050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610f8780620027b483390190565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200017257818101518382015260200162000158565b50506000910152565b600082601f8301126200018d57600080fd5b81516001600160401b0380821115620001aa57620001aa6200013f565b604051601f8301601f19908116603f01168101908282118183101715620001d557620001d56200013f565b81604052838152866020858801011115620001ef57600080fd5b6200020284602083016020890162000155565b9695505050505050565b600080600080600060a086880312156200022557600080fd5b85516001600160a01b03811681146200023d57600080fd5b60208701516040880151606089015192975090955093506001600160401b03808211156200026a57600080fd5b6200027889838a016200017b565b935060808801519150808211156200028f57600080fd5b506200029e888289016200017b565b9150509295509295909350565b60008151808452620002c581602086016020860162000155565b601f01601f19169290920160200192915050565b6001600160a01b0385168152608060208201819052600090620002ff90830186620002ab565b8281036040840152620003138186620002ab565b91505082606083015295945050505050565b61247f80620003356000396000f3fe6080604052600436106101c65760003560e01c80637eec20a8116100f7578063d77a916c11610095578063f2fde38b11610064578063f2fde38b14610586578063f835cd3c146105a6578063f9931be0146105c6578063fe9efcaf146105f357600080fd5b8063d77a916c14610513578063ded98a2914610533578063e75b237814610553578063f0ad56201461056657600080fd5b80639ae71781116100d15780639ae71781146104b3578063b51d0534146104d3578063b65b29cf146104e6578063bc6a48aa146104fd57600080fd5b80637eec20a8146103ff5780638d9776721461041f5780638da5cb5b1461049557600080fd5b8063564a565d116101645780635cf4ee911161013e5780635cf4ee91146103975780635f944326146103b75780636945b123146103d7578063715018a6146103ea57600080fd5b8063564a565d1461031f578063586717301461036b57806359a7b3fe1461038157600080fd5b80633326de98116101a05780633326de981461029f57806334b25ee2146102bf5780634066fae0146102df5780634635256e146102ff57600080fd5b8063020235ff146101fc5780630b4ea64414610247578063202a884e1461027f57600080fd5b366101f7576000546001600160a01b031633036101f55734600260008282546101ef9190612150565b90915550505b005b600080fd5b34801561020857600080fd5b5061023461021736600461217f565b600460209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b34801561025357600080fd5b50600954610267906001600160a01b031681565b6040516001600160a01b03909116815260200161023e565b34801561028b57600080fd5b506101f561029a3660046121b2565b61060a565b3480156102ab57600080fd5b506101f56102ba3660046121b2565b6108d8565b3480156102cb57600080fd5b506101f56102da3660046121d9565b610a09565b3480156102eb57600080fd5b506101f56102fa3660046121b2565b610dbb565b34801561030b57600080fd5b5061023461031a366004612209565b610e34565b34801561032b57600080fd5b5061035661033a3660046121b2565b6008602052600090815260409020805460019091015460ff1682565b6040805192835290151560208301520161023e565b34801561037757600080fd5b5061023460075481565b34801561038d57600080fd5b5061023460015481565b3480156103a357600080fd5b506102346103b2366004612233565b610e60565b3480156103c357600080fd5b506101f56103d23660046121b2565b610f82565b6101f56103e5366004612209565b611056565b3480156103f657600080fd5b506101f56112a0565b34801561040b57600080fd5b506101f561041a3660046121b2565b6112b4565b34801561042b57600080fd5b5061048261043a3660046121b2565b600660205260009081526040902080546001820154600283015460038401546004850154600590950154939492939192909160ff81169061010090046001600160a01b031687565b60405161023e979695949392919061226b565b3480156104a157600080fd5b506000546001600160a01b0316610267565b3480156104bf57600080fd5b506102346104ce366004612209565b6114d6565b6101f56104e1366004612209565b611504565b3480156104f257600080fd5b506102346201518081565b34801561050957600080fd5b5061023460025481565b34801561051f57600080fd5b50600354610267906001600160a01b031681565b34801561053f57600080fd5b506101f561054e3660046121d9565b6117e0565b6101f5610561366004612233565b611aff565b34801561057257600080fd5b506101f56105813660046121b2565b611e13565b34801561059257600080fd5b506101f56105a13660046122cf565b612017565b3480156105b257600080fd5b50600a54610267906001600160a01b031681565b3480156105d257600080fd5b506102346105e13660046122cf565b60056020526000908152604090205481565b3480156105ff57600080fd5b506102346203f48081565b6000818152600660205260408120548291036106415760405162461bcd60e51b8152600401610638906122ea565b60405180910390fd5b6001600083815260066020526040902060059081015460ff169081111561066a5761066a612255565b146106dd5760405162461bcd60e51b815260206004820152603960248201527f43616e277420736c61736820667265656c616e6365722062656361757365207460448201527f6865207461736b206973206e6f7420696e2070726f67726573000000000000006064820152608401610638565b60008281526006602052604090206002810154600190910154429161070191612150565b106107455760405162461bcd60e51b815260206004820152601460248201527315185cdac81a5cc81b9bdd081b185d19481e595d60621b6044820152606401610638565b60008281526006602052604090206005015461010090046001600160a01b031633146107835760405162461bcd60e51b815260040161063890612317565b600082815260066020526040812060058101546004909101546101009091046001600160a01b0316906107b790600261235a565b604051600081818185875af1925050503d80600081146107f3576040519150601f19603f3d011682016040523d82523d6000602084013e6107f8565b606091505b50509050806108195760405162461bcd60e51b815260040161063890612371565b600954600084815260066020526040908190206005810154600390910154915163a9059cbb60e01b81526101009091046001600160a01b039081166004830152602482019290925291169063a9059cbb906044016020604051808303816000875af115801561088c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b091906123be565b5060008381526006602052604090206005908101805460ff19166001835b0217905550505050565b6000818152600660205260408120548291036109065760405162461bcd60e51b8152600401610638906122ea565b61090e612090565b6001600083815260066020526040902060059081015460ff169081111561093757610937612255565b1461097d5760405162461bcd60e51b815260206004820152601660248201527515dbdc9ac8185b1c9958591e4819195b1a5d995c995960521b6044820152606401610638565b6000828152600660205260409020600281015460019091015442916109a191612150565b10156109e15760405162461bcd60e51b815260206004820152600f60248201526e5461736b206973206f76657264756560881b6044820152606401610638565b600082815260066020526040902060050180546003919060ff19166001835b02179055505050565b600082815260066020526040812054839103610a375760405162461bcd60e51b8152600401610638906122ea565b60008381526008602052604090206001015460ff16610a985760405162461bcd60e51b815260206004820152601860248201527f4469737075746520616c7265616479207265736f6c76656400000000000000006044820152606401610638565b6003546001600160a01b03163314610af25760405162461bcd60e51b815260206004820152601d60248201527f596f7520617265206e6f742074686520646973707574652061646d696e0000006044820152606401610638565b8115610c56576000838152600660205260408120600401546002805491929091610b1d9084906123e2565b9091555050600083815260066020526040812060058101546004909101546101009091046001600160a01b031690610b5690600261235a565b604051600081818185875af1925050503d8060008114610b92576040519150601f19603f3d011682016040523d82523d6000602084013e610b97565b606091505b5050905080610bb85760405162461bcd60e51b815260040161063890612371565b600954600085815260066020526040908190206005810154600390910154915163a9059cbb60e01b81526101009091046001600160a01b039081166004830152602482019290925291169063a9059cbb906044016020604051808303816000875af1158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f91906123be565b5050610d7f565b6009546001600160a01b031663a9059cbb610c796000546001600160a01b031690565b6000868152600660205260409081902060030154905160e084901b6001600160e01b03191681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfb91906123be565b5060008054848252600660205260408083206004015490516001600160a01b03909216918381818185875af1925050503d8060008114610d57576040519150601f19603f3d011682016040523d82523d6000602084013e610d5c565b606091505b5050905080610d7d5760405162461bcd60e51b815260040161063890612371565b505b505060009081526006602090815260408083206005908101805460ff199081169092179055600890925290912060019081018054909216179055565b60095460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3091906123be565b5050565b6001600160a01b038216600090815260056020526040812054610e579083610e60565b90505b92915050565b6000808315610ebb576006610e766001866123e2565b610e8190600261235a565b610e8c906001612150565b85610e986001826123e2565b610ea2919061235a565b610eac919061235a565b610eb691906123f5565b610ebe565b60005b9050600084158015610ed05750836001145b610f4557600684610ee26001886123e2565b610eec9190612150565b610ef790600261235a565b610f02906001612150565b610f0c8688612150565b86610f1860018a6123e2565b610f229190612150565b610f2c919061235a565b610f36919061235a565b610f4091906123f5565b610f48565b60005b90506000610f5683836123e2565b600154909150610f6e82670de0b6b3a764000061235a565b610f7891906123f5565b9695505050505050565b600081815260066020526040812054829103610fb05760405162461bcd60e51b8152600401610638906122ea565b610fb8612090565b600082815260066020526040812060059081015460ff1690811115610fdf57610fdf612255565b1461102c5760405162461bcd60e51b815260206004820181905260248201527f5461736b20616c72656164792073746172746564206f722063616e63656c65646044820152606401610638565b6000828152600660205260409020426001808301919091556005909101805460ff19168280610a00565b6001600160a01b0382166000908152600560205260409020548015158061108557506001600160a01b03831633145b6110ea5760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652073686172657327207375626a6563742063616e2062757960448201526f2074686520666972737420736861726560801b6064820152608401610638565b60006110f68284610e60565b90508034101561113f5760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606401610638565b6001600160a01b038416600090815260046020908152604080832033845290915290205461116e908490612150565b6001600160a01b038516600090815260046020908152604080832033845290915290205561119c8383612150565b6001600160a01b0385166000908152600560205260409020557ff7dd8a134438de4c59401760e24ef5c6cc9c74583b2b022085697f3021e597683385600186856111e68289612150565b604080516001600160a01b039788168152959096166020860152921515848601526060840191909152608083015260a082015290519081900360c00190a160095460405163a9059cbb60e01b8152336004820152602481018590526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611275573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129991906123be565b5050505050565b6112a8612090565b6112b260006120ea565b565b6000818152600660205260408120548291036112e25760405162461bcd60e51b8152600401610638906122ea565b60008281526006602052604090206005015461010090046001600160a01b031633146113205760405162461bcd60e51b815260040161063890612317565b600082815260066020526040812060059081015460ff169081111561134757611347612255565b1461138b5760405162461bcd60e51b815260206004820152601460248201527315185cdac8185b1c9958591e481cdd185c9d195960621b6044820152606401610638565b600082815260066020526040808220600581015460049091015491516101009091046001600160a01b0316919060006040518083038185875af1925050503d80600081146113f5576040519150601f19603f3d011682016040523d82523d6000602084013e6113fa565b606091505b505090508061141b5760405162461bcd60e51b815260040161063890612371565b600954600084815260066020526040908190206005810154600390910154915163a9059cbb60e01b81526101009091046001600160a01b039081166004830152602482019290925291169063a9059cbb906044016020604051808303816000875af115801561148e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b291906123be565b50600083815260066020526040902060050180546002919060ff19166001836108ce565b6001600160a01b038216600090815260056020526040812054610e57906114fe9084906123e2565b83610e60565b6001600160a01b03821660009081526005602052604090205481811161156c5760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742073656c6c20746865206c6173742073686172650000000000006044820152606401610638565b600061158161157b84846123e2565b84610e60565b6001600160a01b03851660009081526004602090815260408083203384529091529020549091508311156115ed5760405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e742073686172657360681b6044820152606401610638565b6001600160a01b038416600090815260046020908152604080832033845290915290205461161c9084906123e2565b6001600160a01b038516600090815260046020908152604080832033845290915290205561164a83836123e2565b6001600160a01b0385166000908152600560205260408120919091557ff7dd8a134438de4c59401760e24ef5c6cc9c74583b2b022085697f3021e597689033908690868561169882896123e2565b604080516001600160a01b039788168152959096166020860152921515848601526060840191909152608083015260a082015290519081900360c00190a1604051600090339083908381818185875af1925050503d8060008114611718576040519150601f19603f3d011682016040523d82523d6000602084013e61171d565b606091505b50506009546040516323b872dd60e01b8152336004820152306024820152604481018790529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015611777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179b91906123be565b50806112995760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610638565b60008281526006602052604081205483910361180e5760405162461bcd60e51b8152600401610638906122ea565b60008381526006602052604090206005015461010090046001600160a01b0316331461184c5760405162461bcd60e51b815260040161063890612317565b6003600084815260066020526040902060059081015460ff169081111561187557611875612255565b146118bb5760405162461bcd60e51b815260206004820152601660248201527515dbdc9ac81b9bdd0819195b1a5d995c9959081e595d60521b6044820152606401610638565b6000838152600660205260409020600281015460019091015442916203f480916118e59190612150565b6118ef9190612150565b101561193d5760405162461bcd60e51b815260206004820152601e60248201527f5461736b206973206f76657264756520666f722076616c69646174696f6e00006044820152606401610638565b8115611aa05760008381526006602052604090206005908101805460ff191660018302179055506009546001600160a01b031663a9059cbb6119876000546001600160a01b031690565b6000868152600660205260409081902060030154905160e084901b6001600160e01b03191681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156119e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0991906123be565b50600083815260066020526040808220600581015460049091015491516101009091046001600160a01b0316919060006040518083038185875af1925050503d8060008114611a74576040519150601f19603f3d011682016040523d82523d6000602084013e611a79565b606091505b5050905080611a9a5760405162461bcd60e51b815260040161063890612371565b50505050565b505060008181526006602090815260408083206005018054600460ff199182161790915581518083018352428152808401858152958552600890935292209051815591516001929092018054909116911515919091179055565b505050565b670de0b6b3a76400006002541015611b6f5760405162461bcd60e51b815260206004820152602d60248201527f467265656c616e6365722773207374616b65206973206c657373207468616e2060448201526c312073686172652076616c756560981b6064820152608401610638565b34670de0b6b3a764000014611bdc5760405162461bcd60e51b815260206004820152602d60248201527f436c69656e74207374616b65206973206e6f7420657175616c20746f2074686560448201526c207368617265732076616c756560981b6064820152608401610638565b6009546040516370a0823160e01b8152336004820152670de0b6b3a7640000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c509190612417565b1015611c945760405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e742073686172657360681b6044820152606401610638565b60078054906000611ca483612430565b90915550506040805160e081018252600754815260006020820152908101611ccf6201518085612150565b815260208101839052670de0b6b3a7640000604082015260600160008152336020918201526007546000908152600682526040908190208351815591830151600180840191909155908301516002830155606083015160038301556080830151600483015560a0830151600580840180549293909260ff1916918490811115611d5a57611d5a612255565b021790555060c0919091015160059091018054610100600160a81b0319166101006001600160a01b0393841602179055600954600754600090815260066020526040908190206003015490516323b872dd60e01b815233600482015230602482015260448101919091529116906323b872dd906064016020604051808303816000875af1158015611def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afa91906123be565b600081815260066020526040812054829103611e415760405162461bcd60e51b8152600401610638906122ea565b611e49612090565b6003600083815260066020526040902060059081015460ff1690811115611e7257611e72612255565b14611ecf5760405162461bcd60e51b815260206004820152602760248201527f5461736b206973206e6f7420696e2074686520736c617368656420636c69656e6044820152667420737461746560c81b6064820152608401610638565b6000828152600660205260409020600281015460019091015442916203f48091611ef99190612150565b611f039190612150565b10611f505760405162461bcd60e51b815260206004820152601f60248201527f5461736b2076616c69646174696f6e206973206e6f74206c61746520796574006044820152606401610638565b6009546001600160a01b031663a9059cbb611f736000546001600160a01b031690565b6000858152600660205260409081902060030154905160e084901b6001600160e01b03191681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff591906123be565b5060008281526006602052604090206005908101805460ff1916600183610a00565b61201f612090565b6001600160a01b0381166120845760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610638565b61208d816120ea565b50565b6000546001600160a01b031633146112b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610638565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610e5a57610e5a61213a565b80356001600160a01b038116811461217a57600080fd5b919050565b6000806040838503121561219257600080fd5b61219b83612163565b91506121a960208401612163565b90509250929050565b6000602082840312156121c457600080fd5b5035919050565b801515811461208d57600080fd5b600080604083850312156121ec57600080fd5b8235915060208301356121fe816121cb565b809150509250929050565b6000806040838503121561221c57600080fd5b61222583612163565b946020939093013593505050565b6000806040838503121561224657600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b600060e082019050888252876020830152866040830152856060830152846080830152600684106122ac57634e487b7160e01b600052602160045260246000fd5b60a08201939093526001600160a01b039190911660c09091015295945050505050565b6000602082840312156122e157600080fd5b610e5782612163565b60208082526013908201527215185cdac8191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b60208082526023908201527f596f7520617265206e6f742074686520636c69656e74206f662074686973207460408201526261736b60e81b606082015260800190565b8082028115828204841417610e5a57610e5a61213a565b6020808252602d908201527f4661696c656420746f2073656e6420746865207374616b6520616d6f756e742060408201526c1d1bc81d1a194818db1a595b9d609a1b606082015260800190565b6000602082840312156123d057600080fd5b81516123db816121cb565b9392505050565b81810381811115610e5a57610e5a61213a565b60008261241257634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561242957600080fd5b5051919050565b6000600182016124425761244261213a565b506001019056fea2646970667358221220289b712b09a268b540a0ff5c4950d476e0da925eb82e7f421734412ae64a383564736f6c6343000814003360806040523480156200001157600080fd5b5060405162000f8738038062000f8783398101604081905262000034916200026c565b828260036200004483826200038c565b5060046200005382826200038c565b505050620000706200006a6200008660201b60201c565b6200008a565b6200007c8482620000dc565b5050505062000480565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216620001375760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b80600260008282546200014b919062000458565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001cf57600080fd5b81516001600160401b0380821115620001ec57620001ec620001a7565b604051601f8301601f19908116603f01168101908282118183101715620002175762000217620001a7565b816040528381526020925086838588010111156200023457600080fd5b600091505b8382101562000258578582018301518183018401529082019062000239565b600093810190920192909252949350505050565b600080600080608085870312156200028357600080fd5b84516001600160a01b03811681146200029b57600080fd5b60208601519094506001600160401b0380821115620002b957600080fd5b620002c788838901620001bd565b94506040870151915080821115620002de57600080fd5b50620002ed87828801620001bd565b606096909601519497939650505050565b600181811c908216806200031357607f821691505b6020821081036200033457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001a257600081815260208120601f850160051c81016020861015620003635750805b601f850160051c820191505b8181101562000384578281556001016200036f565b505050505050565b81516001600160401b03811115620003a857620003a8620001a7565b620003c081620003b98454620002fe565b846200033a565b602080601f831160018114620003f85760008415620003df5750858301515b600019600386901b1c1916600185901b17855562000384565b600085815260208120601f198616915b82811015620004295788860151825594840194600190910190840162000408565b5085821015620004485787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808201808211156200047a57634e487b7160e01b600052601160045260246000fd5b92915050565b610af780620004906000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d7146101eb578063a9059cbb146101fe578063dd62ed3e14610211578063f2fde38b1461022457600080fd5b806370a0823114610197578063715018a6146101c05780638da5cb5b146101c857806395d89b41146101e357600080fd5b806323b872dd116100d357806323b872dd1461014d578063313ce56714610160578063395093511461016f57806340c10f191461018257600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b610102610237565b60405161010f9190610941565b60405180910390f35b61012b6101263660046109ab565b6102c9565b604051901515815260200161010f565b6002545b60405190815260200161010f565b61012b61015b3660046109d5565b6102e3565b6040516012815260200161010f565b61012b61017d3660046109ab565b610307565b6101956101903660046109ab565b610329565b005b61013f6101a5366004610a11565b6001600160a01b031660009081526020819052604090205490565b61019561033f565b6005546040516001600160a01b03909116815260200161010f565b610102610353565b61012b6101f93660046109ab565b610362565b61012b61020c3660046109ab565b6103e2565b61013f61021f366004610a33565b6103f0565b610195610232366004610a11565b61041b565b60606003805461024690610a66565b80601f016020809104026020016040519081016040528092919081815260200182805461027290610a66565b80156102bf5780601f10610294576101008083540402835291602001916102bf565b820191906000526020600020905b8154815290600101906020018083116102a257829003601f168201915b5050505050905090565b6000336102d7818585610494565b60019150505b92915050565b6000336102f18582856105b8565b6102fc858585610632565b506001949350505050565b6000336102d781858561031a83836103f0565b6103249190610aa0565b610494565b6103316107d6565b61033b8282610830565b5050565b6103476107d6565b61035160006108ef565b565b60606004805461024690610a66565b6000338161037082866103f0565b9050838110156103d55760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102fc8286868403610494565b6000336102d7818585610632565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6104236107d6565b6001600160a01b0381166104885760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103cc565b610491816108ef565b50565b6001600160a01b0383166104f65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103cc565b6001600160a01b0382166105575760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103cc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006105c484846103f0565b9050600019811461062c578181101561061f5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103cc565b61062c8484848403610494565b50505050565b6001600160a01b0383166106965760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103cc565b6001600160a01b0382166106f85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103cc565b6001600160a01b038316600090815260208190526040902054818110156107705760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103cc565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361062c565b6005546001600160a01b031633146103515760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103cc565b6001600160a01b0382166108865760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103cc565b80600260008282546108989190610aa0565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208083528351808285015260005b8181101561096e57858101830151858201604001528201610952565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146109a657600080fd5b919050565b600080604083850312156109be57600080fd5b6109c78361098f565b946020939093013593505050565b6000806000606084860312156109ea57600080fd5b6109f38461098f565b9250610a016020850161098f565b9150604084013590509250925092565b600060208284031215610a2357600080fd5b610a2c8261098f565b9392505050565b60008060408385031215610a4657600080fd5b610a4f8361098f565b9150610a5d6020840161098f565b90509250929050565b600181811c90821680610a7a57607f821691505b602082108103610a9a57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102dd57634e487b7160e01b600052601160045260246000fdfea2646970667358221220f8855897da80d1e84b2f02d265a9c0415e19ebf1c6e7ef53cf0043a09c137b8f64736f6c63430008140033a2646970667358221220d3d237d6316c68cafef31e56dc59b4bee9c4e342d9cd912007163db14b168efe64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 846,
        "contract": "contracts/ContractFactory.sol:ContractFactory",
        "label": "idCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 850,
        "contract": "contracts/ContractFactory.sol:ContractFactory",
        "label": "freelancers",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(FreelancerInfo)844_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(FreelancerInfo)844_storage)dyn_storage": {
        "base": "t_struct(FreelancerInfo)844_storage",
        "encoding": "dynamic_array",
        "label": "struct ContractFactory.FreelancerInfo[]",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FreelancerInfo)844_storage": {
        "encoding": "inplace",
        "label": "struct ContractFactory.FreelancerInfo",
        "members": [
          {
            "astId": 835,
            "contract": "contracts/ContractFactory.sol:ContractFactory",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 837,
            "contract": "contracts/ContractFactory.sol:ContractFactory",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 839,
            "contract": "contracts/ContractFactory.sol:ContractFactory",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 841,
            "contract": "contracts/ContractFactory.sol:ContractFactory",
            "label": "stakingContractAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 843,
            "contract": "contracts/ContractFactory.sol:ContractFactory",
            "label": "owner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}